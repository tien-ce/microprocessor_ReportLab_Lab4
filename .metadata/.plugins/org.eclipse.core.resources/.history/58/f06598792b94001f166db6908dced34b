/*
 * scheduler.c
 *
 *  Created on: Oct 26, 2024
 *      Author: thuyh
 */


#include "scheduler.h"
sTasks SCH_Tasks_G[SCH_MAX_TACKS];
uint8_t current_index_task = 0;
#define time_cycle 10
void SCH_INIT(void){
	current_index_task = 0;
}
void SCH_Add_Task(void (*pFunction)(),uint32_t DELAY,uint32_t PERIOD){
	if(current_index_task < SCH_MAX_TACKS){
		SCH_Tasks_G[current_index_task].pTask = pFunction;
		SCH_Tasks_G[current_index_task].Delay = DELAY / time_cycle;
		SCH_Tasks_G[current_index_task].Period = PERIOD / time_cycle;
		SCH_Tasks_G[current_index_task].RunMe = 0;
		SCH_Tasks_G[current_index_task].TaskID = current_index_task;
		current_index_task++ ;
	}
}
void SCH_Update(void){
	for(int i = 0 ; i< current_index_task ; i++){
		if(SCH_Tasks_G[i].Delay > 0 ){
			SCH_Tasks_G[i].Delay -- ;
		}
		else{
			SCH_Tasks_G[i].Delay = SCH_Tasks_G[i].Period;
			SCH_Tasks_G[i].RunMe +=1;
		}
	}
}
void SCH_Dispatch_Task(void){
	for (int i =0 ; i<SCH_MAX_TACKS;i++){
		if(SCH_Tasks_G[i].RunMe > 0){
			SCH_Tasks_G[i].RunMe--;
			(*SCH_Tasks_G[i].pTask)(	);
		}
	}
}
