#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "scheduler.h"

UART_HandleTypeDef huart2;

SCH_TaskList taskList = {NULL};

void SCH_Add_Task(void (*pFunction)(), const uint32_t DELAY, const uint32_t PERIOD) {
    SCH_TaskNode* newNode = (SCH_TaskNode*)malloc(sizeof(SCH_TaskNode));
    if (newNode == NULL) {
        printf("Error: Unable to allocate memory for new task.\n");
        return;
    }
    newNode->task.pFunction = pFunction;
    newNode->task.Delay = DELAY;
    newNode->task.Period = PERIOD;
    newNode->task.RunMe = 0;
    newNode->next = NULL;

    if (taskList.head == NULL) {
        taskList.head = newNode;
    } else {
        SCH_TaskNode* current = taskList.head;
        SCH_TaskNode* previous = NULL;
        uint32_t currentDelay = DELAY;

        while (current != NULL && currentDelay >= current->task.Delay) {
            currentDelay -= current->task.Delay;
            previous = current;
            current = current->next;
        }

        newNode->task.Delay = currentDelay;

        if (previous == NULL) {
            newNode->next = taskList.head;
            taskList.head->task.Delay -= currentDelay;
            taskList.head = newNode;
        } else {
            newNode->next = current;
            previous->next = newNode;
            if (current != NULL) {
                current->task.Delay -= currentDelay;
            }
        }
    }
}

void SCH_Delete_Fist_Task() {
    if (taskList.head != NULL) {
        SCH_TaskNode* temp = taskList.head;
        taskList.head = taskList.head->next;
        if (taskList.head != NULL) {
            taskList.head->task.Delay += temp->task.Delay;
        }
        free(temp);
    }
}

void SCH_Delete_Task(int position) {
    if (taskList.head == NULL) {
        return;
    }

    SCH_TaskNode* current = taskList.head;
    SCH_TaskNode* previous = NULL;
    uint32_t currentPos = 0;

    while (current != NULL && currentPos < position) {
        previous = current;
        current = current->next;
        currentPos++;
    }

    if (current == NULL) {
        return;
    }

    if (previous == NULL) {
        taskList.head = current->next;
    } else {
        previous->next = current->next;
    }

    if (current->next != NULL) {
        current->next->task.Delay += current->task.Delay;
    }

    free(current);
}

void SCH_Dispatch_Tasks(void) {
    if (taskList.head != NULL && taskList.head->task.RunMe > 0) {
        // Execute the task
        (*taskList.head->task.pFunction)();
        taskList.head->task.RunMe--;

        if (taskList.head->task.Period > 0) {
            // Reset the Delay to Period
            taskList.head->task.Delay = taskList.head->task.Period;

            // Remove the task from the head
            SCH_TaskNode* currentTask = taskList.head;
            taskList.head = currentTask->next;

            // Adjust the Delay of the next task
            if (taskList.head != NULL) {
                taskList.head->task.Delay += currentTask->task.Delay;
            }

            // Reinsert the task into the list at the correct position
            SCH_TaskNode* current = taskList.head;
            SCH_TaskNode* previous = NULL;
            uint32_t currentDelay = currentTask->task.Delay;

            while (current != NULL && currentDelay >= current->task.Delay) {
                currentDelay -= current->task.Delay;
                previous = current;
                current = current->next;
            }

            currentTask->task.Delay = currentDelay;

            if (previous == NULL) {
                currentTask->next = taskList.head;
                if (taskList.head != NULL) {
                    taskList.head->task.Delay -= currentDelay;
                }
                taskList.head = currentTask;
            } else {
                currentTask->next = current;
                previous->next = currentTask;
                if (current != NULL) {
                    current->task.Delay -= currentDelay;
                }
            }
        } else {
            // One-shot task, delete it
            SCH_Delete_Fist_Task();
        }
    }
}

void SCH_Update(void) {
    if (taskList.head == NULL) {
        return;
    }

    if (taskList.head->task.Delay > 0) {
        taskList.head->task.Delay--;
        if (taskList.head->task.Delay == 0) {
            taskList.head->task.RunMe++;
        }
    }
}
