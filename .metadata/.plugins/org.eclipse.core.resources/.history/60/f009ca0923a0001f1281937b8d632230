/*
 * scheduler.c
 *
 *  Created on: Oct 26, 2024
 *      Author: thuyh
 */

#include "scheduler.h"
UART_HandleTypeDef huart2;
SCH_TaskList taskList = { .head = NULL };
void SCH_Add_Task(void (*pFunction)(), int32_t DELAY, uint32_t PERIOD){
    DELAY = DELAY / time_cycle;
    PERIOD = PERIOD / time_cycle;
    int index_add = current_index_task;
    if(current_index_task < SCH_MAX_TASKS){
        for(int i =0 ; i < current_index_task ; i++){
            if(SCH_Tasks_G[i].Delay <= DELAY)
                DELAY -= SCH_Tasks_G[i].Delay;
            else{
                index_add = i;
                break;
            }
        }
        for(int i = current_index_task; i > index_add; i--){
            SCH_Tasks_G[i] = SCH_Tasks_G[i-1];
        }
        current_index_task++;
        SCH_Tasks_G[index_add].pTask = pFunction;
        SCH_Tasks_G[index_add].Delay = DELAY;
        SCH_Tasks_G[index_add].Period = PERIOD;
        if(index_add < current_index_task - 1) // Nếu không thêm vào cuối
            SCH_Tasks_G[index_add+1].Delay -= SCH_Tasks_G[index_add].Delay;
    }
}
void SCH_Update(void){
    if(current_index_task == 0){
        return; // Không có nhiệm vụ nào để cập nhật
    }

    if(SCH_Tasks_G[0].Delay > 0){
        SCH_Tasks_G[0].Delay--;
    }

    if(SCH_Tasks_G[0].Delay <= 0){
        SCH_Tasks_G[0].Delay = SCH_Tasks_G[0].Period;
        if(SCH_Tasks_G[0].RunMe < 1){
            SCH_Tasks_G[0].RunMe = 1;
        }
    }
}

void SCH_Dispatch_Task(void){
    __disable_irq(); // Vô hiệu hóa ngắt để bảo vệ truy cập biến chia sẻ

    if(SCH_Tasks_G[0].RunMe > 0){
        SCH_Tasks_G[0].RunMe--;
        __enable_irq(); // Bật lại ngắt trước khi chạy nhiệm vụ
        (*SCH_Tasks_G[0].pTask)();
    }
    else{
        __enable_irq(); // Bật lại ngắt nếu không có nhiệm vụ cần chạy
    }

    if(SCH_Tasks_G[0].RunMe <= 0){ // Chạy hết lượt
        if(SCH_Tasks_G[0].Period <= 0){ // Nhiệm vụ chạy một lần
            SCH_Delete(0);
        }
        else{ // Nhiệm vụ định kỳ
            // Không cần xóa và thêm lại nhiệm vụ, chỉ đặt lại Delay trong SCH_Update
            // Nếu cần, bạn có thể giữ lại việc xóa và thêm lại nếu có lý do cụ thể
        }
    }
}

void SCH_Add_Oneshort_tasks(void (*pFunction)(),int32_t DELAY){
	SCH_Add_Task(pFunction, DELAY, 0);
}
void dele
void SCH_Delete_Task(int id) {
    SCH_TaskNode* current = taskList.head;
    SCH_TaskNode* previous = NULL;
    int currentPosition = 0;

    // Duyệt qua danh sách để tìm vị trí cần xóa
    while (current != NULL) {
        if (currentPosition == id) {  // Kiểm tra nếu vị trí hiện tại bằng id cần xóa
            if (previous == NULL) {
                // Xóa đầu danh sách
                taskList.head = current->next;
            } else {
                previous->next = current->next;
            }
            free(current);
            return;
        }
        previous = current;
        current = current->next;
        currentPosition++;
    }
}
