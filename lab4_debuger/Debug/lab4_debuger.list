
lab4_debuger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003570  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036ec  080036ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080036ec  080036ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036ec  080036ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036ec  080036ec  000136ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000070  08003764  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08003764  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcc9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e16  00000000  00000000  0002dd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000307d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001781d  00000000  00000000  00031380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d88d  00000000  00000000  00048b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088acd  00000000  00000000  0005642a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000deef7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003750  00000000  00000000  000def4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003664 	.word	0x08003664

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003664 	.word	0x08003664

0800014c <send_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int counter = 0;
void send_time(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
    char buffer[20];
    int length = sprintf(buffer, "Time: %d ms\r\n",  counter); // Thêm chuỗi "Time:" và xuống dòng "\r\n"
 8000152:	4b0a      	ldr	r3, [pc, #40]	; (800017c <send_time+0x30>)
 8000154:	681a      	ldr	r2, [r3, #0]
 8000156:	463b      	mov	r3, r7
 8000158:	4909      	ldr	r1, [pc, #36]	; (8000180 <send_time+0x34>)
 800015a:	4618      	mov	r0, r3
 800015c:	f002 fe48 	bl	8002df0 <siprintf>
 8000160:	6178      	str	r0, [r7, #20]
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 8000162:	697b      	ldr	r3, [r7, #20]
 8000164:	b29a      	uxth	r2, r3
 8000166:	4639      	mov	r1, r7
 8000168:	f04f 33ff 	mov.w	r3, #4294967295
 800016c:	4805      	ldr	r0, [pc, #20]	; (8000184 <send_time+0x38>)
 800016e:	f001 fea9 	bl	8001ec4 <HAL_UART_Transmit>
}
 8000172:	bf00      	nop
 8000174:	3718      	adds	r7, #24
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	2000008c 	.word	0x2000008c
 8000180:	0800367c 	.word	0x0800367c
 8000184:	200000e8 	.word	0x200000e8

08000188 <LEDREDBINKY>:

uint8_t data[] = "Hello UART\r\n";
void LEDREDBINKY(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
 800018c:	2120      	movs	r1, #32
 800018e:	4803      	ldr	r0, [pc, #12]	; (800019c <LEDREDBINKY+0x14>)
 8000190:	f000 fe44 	bl	8000e1c <HAL_GPIO_TogglePin>
	send_time();
 8000194:	f7ff ffda 	bl	800014c <send_time>
}
 8000198:	bf00      	nop
 800019a:	bd80      	pop	{r7, pc}
 800019c:	40010800 	.word	0x40010800

080001a0 <LEDGREENBINKY>:
void LEDGREENBINKY(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin);
 80001a4:	2110      	movs	r1, #16
 80001a6:	4803      	ldr	r0, [pc, #12]	; (80001b4 <LEDGREENBINKY+0x14>)
 80001a8:	f000 fe38 	bl	8000e1c <HAL_GPIO_TogglePin>
	send_time();
 80001ac:	f7ff ffce 	bl	800014c <send_time>
}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	40010800 	.word	0x40010800

080001b8 <LEDYELLOWBINKY>:

void LEDYELLOWBINKY(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_Pin);
 80001bc:	2140      	movs	r1, #64	; 0x40
 80001be:	4803      	ldr	r0, [pc, #12]	; (80001cc <LEDYELLOWBINKY+0x14>)
 80001c0:	f000 fe2c 	bl	8000e1c <HAL_GPIO_TogglePin>
	send_time();
 80001c4:	f7ff ffc2 	bl	800014c <send_time>
}
 80001c8:	bf00      	nop
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40010800 	.word	0x40010800

080001d0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fa6e 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f82a 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8da 	bl	8000394 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001e0:	f000 f862 	bl	80002a8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f8ac 	bl	8000340 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <main+0x50>)
 80001ea:	f001 fa8f 	bl	800170c <HAL_TIM_Base_Start_IT>
  SCH_INIT();
 80001ee:	f002 fc2f 	bl	8002a50 <SCH_INIT>
  SCH_Add_Task(LEDREDBINKY, 500, 1000);
 80001f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80001fa:	480a      	ldr	r0, [pc, #40]	; (8000224 <main+0x54>)
 80001fc:	f002 fc34 	bl	8002a68 <SCH_Add_Task>
  SCH_Add_Task(LEDYELLOWBINKY, 500, 1000);
 8000200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000204:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <main+0x58>)
 800020a:	f002 fc2d 	bl	8002a68 <SCH_Add_Task>
  SCH_Add_Oneshort_tasks(LEDGREENBINKY, 500);
 800020e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0x5c>)
 8000214:	f002 fd42 	bl	8002c9c <SCH_Add_Oneshort_tasks>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 SCH_Dispatch_Task();
 8000218:	f002 fd02 	bl	8002c20 <SCH_Dispatch_Task>
 800021c:	e7fc      	b.n	8000218 <main+0x48>
 800021e:	bf00      	nop
 8000220:	200000a0 	.word	0x200000a0
 8000224:	08000189 	.word	0x08000189
 8000228:	080001b9 	.word	0x080001b9
 800022c:	080001a1 	.word	0x080001a1

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	; 0x40
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fdce 	bl	8002de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025e:	2300      	movs	r3, #0
 8000260:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fdf2 	bl	8000e50 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000272:	f000 f8d3 	bl	800041c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f001 f85e 	bl	8001350 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029a:	f000 f8bf 	bl	800041c <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3740      	adds	r7, #64	; 0x40
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ae:	f107 0308 	add.w	r3, r7, #8
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002bc:	463b      	mov	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c4:	4b1d      	ldr	r3, [pc, #116]	; (800033c <MX_TIM2_Init+0x94>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_TIM2_Init+0x94>)
 80002ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <MX_TIM2_Init+0x94>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_TIM2_Init+0x94>)
 80002dc:	2209      	movs	r2, #9
 80002de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <MX_TIM2_Init+0x94>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_TIM2_Init+0x94>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002ec:	4813      	ldr	r0, [pc, #76]	; (800033c <MX_TIM2_Init+0x94>)
 80002ee:	f001 f9bd 	bl	800166c <HAL_TIM_Base_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002f8:	f000 f890 	bl	800041c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	4619      	mov	r1, r3
 8000308:	480c      	ldr	r0, [pc, #48]	; (800033c <MX_TIM2_Init+0x94>)
 800030a:	f001 fb3b 	bl	8001984 <HAL_TIM_ConfigClockSource>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000314:	f000 f882 	bl	800041c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000318:	2300      	movs	r3, #0
 800031a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031c:	2300      	movs	r3, #0
 800031e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000320:	463b      	mov	r3, r7
 8000322:	4619      	mov	r1, r3
 8000324:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_TIM2_Init+0x94>)
 8000326:	f001 fd13 	bl	8001d50 <HAL_TIMEx_MasterConfigSynchronization>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000330:	f000 f874 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000334:	bf00      	nop
 8000336:	3718      	adds	r7, #24
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	200000a0 	.word	0x200000a0

08000340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <MX_USART2_UART_Init+0x50>)
 8000348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <MX_USART2_UART_Init+0x4c>)
 800034c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_USART2_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000366:	220c      	movs	r2, #12
 8000368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_USART2_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000378:	f001 fd54 	bl	8001e24 <HAL_UART_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000382:	f000 f84b 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	200000e8 	.word	0x200000e8
 8000390:	40004400 	.word	0x40004400

08000394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 0308 	add.w	r3, r7, #8
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_GPIO_Init+0x5c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a10      	ldr	r2, [pc, #64]	; (80003f0 <MX_GPIO_Init+0x5c>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_GPIO_Init+0x5c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2170      	movs	r1, #112	; 0x70
 80003c4:	480b      	ldr	r0, [pc, #44]	; (80003f4 <MX_GPIO_Init+0x60>)
 80003c6:	f000 fd11 	bl	8000dec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin;
 80003ca:	2370      	movs	r3, #112	; 0x70
 80003cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ce:	2301      	movs	r3, #1
 80003d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d6:	2302      	movs	r3, #2
 80003d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003da:	f107 0308 	add.w	r3, r7, #8
 80003de:	4619      	mov	r1, r3
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_GPIO_Init+0x60>)
 80003e2:	f000 fb89 	bl	8000af8 <HAL_GPIO_Init>

}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010800 	.word	0x40010800

080003f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	 SCH_Update();
 8000400:	f002 fbea 	bl	8002bd8 <SCH_Update>
	 counter+=10;
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	330a      	adds	r3, #10
 800040a:	4a03      	ldr	r2, [pc, #12]	; (8000418 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800040c:	6013      	str	r3, [r2, #0]
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	2000008c 	.word	0x2000008c

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	e7fe      	b.n	8000424 <Error_Handler+0x8>
	...

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <HAL_MspInit+0x5c>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <HAL_MspInit+0x5c>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_MspInit+0x60>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <HAL_MspInit+0x60>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000
 8000488:	40010000 	.word	0x40010000

0800048c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800049c:	d113      	bne.n	80004c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_TIM_Base_MspInit+0x44>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <HAL_TIM_Base_MspInit+0x44>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <HAL_TIM_Base_MspInit+0x44>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2100      	movs	r1, #0
 80004ba:	201c      	movs	r0, #28
 80004bc:	f000 fa33 	bl	8000926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004c0:	201c      	movs	r0, #28
 80004c2:	f000 fa4c 	bl	800095e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000

080004d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a1f      	ldr	r2, [pc, #124]	; (800056c <HAL_UART_MspInit+0x98>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d137      	bne.n	8000564 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <HAL_UART_MspInit+0x9c>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	4a1d      	ldr	r2, [pc, #116]	; (8000570 <HAL_UART_MspInit+0x9c>)
 80004fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fe:	61d3      	str	r3, [r2, #28]
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <HAL_UART_MspInit+0x9c>)
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <HAL_UART_MspInit+0x9c>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a17      	ldr	r2, [pc, #92]	; (8000570 <HAL_UART_MspInit+0x9c>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_UART_MspInit+0x9c>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000524:	2304      	movs	r3, #4
 8000526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000528:	2302      	movs	r3, #2
 800052a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <HAL_UART_MspInit+0xa0>)
 8000538:	f000 fade 	bl	8000af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800053c:	2308      	movs	r3, #8
 800053e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <HAL_UART_MspInit+0xa0>)
 8000550:	f000 fad2 	bl	8000af8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	2026      	movs	r0, #38	; 0x26
 800055a:	f000 f9e4 	bl	8000926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800055e:	2026      	movs	r0, #38	; 0x26
 8000560:	f000 f9fd 	bl	800095e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40004400 	.word	0x40004400
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800057c:	e7fe      	b.n	800057c <NMI_Handler+0x4>

0800057e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <MemManage_Handler+0x4>

0800058a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <UsageFault_Handler+0x4>

08000596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005be:	f000 f8bf 	bl	8000740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <TIM2_IRQHandler+0x10>)
 80005ce:	f001 f8e9 	bl	80017a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000a0 	.word	0x200000a0

080005dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <USART2_IRQHandler+0x10>)
 80005e2:	f001 fcfb 	bl	8001fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000e8 	.word	0x200000e8

080005f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <_sbrk+0x5c>)
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <_sbrk+0x60>)
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <_sbrk+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <_sbrk+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d207      	bcs.n	8000630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000620:	f002 fbb4 	bl	8002d8c <__errno>
 8000624:	4603      	mov	r3, r0
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e009      	b.n	8000644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <_sbrk+0x64>)
 8000640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20002800 	.word	0x20002800
 8000650:	00000400 	.word	0x00000400
 8000654:	20000090 	.word	0x20000090
 8000658:	20000468 	.word	0x20000468

0800065c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000668:	f7ff fff8 	bl	800065c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800066e:	490c      	ldr	r1, [pc, #48]	; (80006a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000684:	4c09      	ldr	r4, [pc, #36]	; (80006ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000692:	f002 fb81 	bl	8002d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000696:	f7ff fd9b 	bl	80001d0 <main>
  bx lr
 800069a:	4770      	bx	lr
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006a4:	080036f4 	.word	0x080036f4
  ldr r2, =_sbss
 80006a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006ac:	20000464 	.word	0x20000464

080006b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_2_IRQHandler>
	...

080006b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <HAL_Init+0x28>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_Init+0x28>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 f923 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ca:	200f      	movs	r0, #15
 80006cc:	f000 f808 	bl	80006e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d0:	f7ff feaa 	bl	8000428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40022000 	.word	0x40022000

080006e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_InitTick+0x54>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_InitTick+0x58>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f93b 	bl	800097a <HAL_SYSTICK_Config>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e00e      	b.n	800072c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d80a      	bhi.n	800072a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f000 f903 	bl	8000926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <HAL_InitTick+0x5c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000726:	2300      	movs	r3, #0
 8000728:	e000      	b.n	800072c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000000 	.word	0x20000000
 8000738:	20000008 	.word	0x20000008
 800073c:	20000004 	.word	0x20000004

08000740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_IncTick+0x1c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_IncTick+0x20>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a03      	ldr	r2, [pc, #12]	; (8000760 <HAL_IncTick+0x20>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	20000008 	.word	0x20000008
 8000760:	20000130 	.word	0x20000130

08000764 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return uwTick;
 8000768:	4b02      	ldr	r3, [pc, #8]	; (8000774 <HAL_GetTick+0x10>)
 800076a:	681b      	ldr	r3, [r3, #0]
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	20000130 	.word	0x20000130

08000778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007aa:	4a04      	ldr	r2, [pc, #16]	; (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	60d3      	str	r3, [r2, #12]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <__NVIC_GetPriorityGrouping+0x18>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	f003 0307 	and.w	r3, r3, #7
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db0b      	blt.n	8000806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 021f 	and.w	r2, r3, #31
 80007f4:	4906      	ldr	r1, [pc, #24]	; (8000810 <__NVIC_EnableIRQ+0x34>)
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	e000e100 	.word	0xe000e100

08000814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	db0a      	blt.n	800083e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	490c      	ldr	r1, [pc, #48]	; (8000860 <__NVIC_SetPriority+0x4c>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	440b      	add	r3, r1
 8000838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800083c:	e00a      	b.n	8000854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <__NVIC_SetPriority+0x50>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	3b04      	subs	r3, #4
 800084c:	0112      	lsls	r2, r2, #4
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	440b      	add	r3, r1
 8000852:	761a      	strb	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f1c3 0307 	rsb	r3, r3, #7
 8000882:	2b04      	cmp	r3, #4
 8000884:	bf28      	it	cs
 8000886:	2304      	movcs	r3, #4
 8000888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3304      	adds	r3, #4
 800088e:	2b06      	cmp	r3, #6
 8000890:	d902      	bls.n	8000898 <NVIC_EncodePriority+0x30>
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3b03      	subs	r3, #3
 8000896:	e000      	b.n	800089a <NVIC_EncodePriority+0x32>
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	4313      	orrs	r3, r2
         );
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3724      	adds	r7, #36	; 0x24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008dc:	d301      	bcc.n	80008e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008de:	2301      	movs	r3, #1
 80008e0:	e00f      	b.n	8000902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <SysTick_Config+0x40>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ea:	210f      	movs	r1, #15
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f7ff ff90 	bl	8000814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <SysTick_Config+0x40>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <SysTick_Config+0x40>)
 80008fc:	2207      	movs	r2, #7
 80008fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010

08000910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff2d 	bl	8000778 <__NVIC_SetPriorityGrouping>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000938:	f7ff ff42 	bl	80007c0 <__NVIC_GetPriorityGrouping>
 800093c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	6978      	ldr	r0, [r7, #20]
 8000944:	f7ff ff90 	bl	8000868 <NVIC_EncodePriority>
 8000948:	4602      	mov	r2, r0
 800094a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff5f 	bl	8000814 <__NVIC_SetPriority>
}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff35 	bl	80007dc <__NVIC_EnableIRQ>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ffa2 	bl	80008cc <SysTick_Config>
 8000988:	4603      	mov	r3, r0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000992:	b480      	push	{r7}
 8000994:	b085      	sub	sp, #20
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d008      	beq.n	80009bc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2204      	movs	r2, #4
 80009ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e020      	b.n	80009fe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f022 020e 	bic.w	r2, r2, #14
 80009ca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f022 0201 	bic.w	r2, r2, #1
 80009da:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009e4:	2101      	movs	r1, #1
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2201      	movs	r2, #1
 80009f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d005      	beq.n	8000a2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2204      	movs	r2, #4
 8000a24:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e051      	b.n	8000ad0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 020e 	bic.w	r2, r2, #14
 8000a3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f022 0201 	bic.w	r2, r2, #1
 8000a4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a22      	ldr	r2, [pc, #136]	; (8000adc <HAL_DMA_Abort_IT+0xd4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d029      	beq.n	8000aaa <HAL_DMA_Abort_IT+0xa2>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <HAL_DMA_Abort_IT+0xd8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d022      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x9e>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <HAL_DMA_Abort_IT+0xdc>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d01a      	beq.n	8000aa0 <HAL_DMA_Abort_IT+0x98>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <HAL_DMA_Abort_IT+0xe0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d012      	beq.n	8000a9a <HAL_DMA_Abort_IT+0x92>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <HAL_DMA_Abort_IT+0xe4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d00a      	beq.n	8000a94 <HAL_DMA_Abort_IT+0x8c>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <HAL_DMA_Abort_IT+0xe8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d102      	bne.n	8000a8e <HAL_DMA_Abort_IT+0x86>
 8000a88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a8c:	e00e      	b.n	8000aac <HAL_DMA_Abort_IT+0xa4>
 8000a8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a92:	e00b      	b.n	8000aac <HAL_DMA_Abort_IT+0xa4>
 8000a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a98:	e008      	b.n	8000aac <HAL_DMA_Abort_IT+0xa4>
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	e005      	b.n	8000aac <HAL_DMA_Abort_IT+0xa4>
 8000aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa4:	e002      	b.n	8000aac <HAL_DMA_Abort_IT+0xa4>
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	e000      	b.n	8000aac <HAL_DMA_Abort_IT+0xa4>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <HAL_DMA_Abort_IT+0xec>)
 8000aae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	4798      	blx	r3
    } 
  }
  return status;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40020008 	.word	0x40020008
 8000ae0:	4002001c 	.word	0x4002001c
 8000ae4:	40020030 	.word	0x40020030
 8000ae8:	40020044 	.word	0x40020044
 8000aec:	40020058 	.word	0x40020058
 8000af0:	4002006c 	.word	0x4002006c
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b08b      	sub	sp, #44	; 0x2c
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0a:	e148      	b.n	8000d9e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	69fa      	ldr	r2, [r7, #28]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	f040 8137 	bne.w	8000d98 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	4aa3      	ldr	r2, [pc, #652]	; (8000dbc <HAL_GPIO_Init+0x2c4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d05e      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
 8000b34:	4aa1      	ldr	r2, [pc, #644]	; (8000dbc <HAL_GPIO_Init+0x2c4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d875      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b3a:	4aa1      	ldr	r2, [pc, #644]	; (8000dc0 <HAL_GPIO_Init+0x2c8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d058      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
 8000b40:	4a9f      	ldr	r2, [pc, #636]	; (8000dc0 <HAL_GPIO_Init+0x2c8>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d86f      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b46:	4a9f      	ldr	r2, [pc, #636]	; (8000dc4 <HAL_GPIO_Init+0x2cc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d052      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
 8000b4c:	4a9d      	ldr	r2, [pc, #628]	; (8000dc4 <HAL_GPIO_Init+0x2cc>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d869      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b52:	4a9d      	ldr	r2, [pc, #628]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d04c      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
 8000b58:	4a9b      	ldr	r2, [pc, #620]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d863      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b5e:	4a9b      	ldr	r2, [pc, #620]	; (8000dcc <HAL_GPIO_Init+0x2d4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d046      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
 8000b64:	4a99      	ldr	r2, [pc, #612]	; (8000dcc <HAL_GPIO_Init+0x2d4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d85d      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b6a:	2b12      	cmp	r3, #18
 8000b6c:	d82a      	bhi.n	8000bc4 <HAL_GPIO_Init+0xcc>
 8000b6e:	2b12      	cmp	r3, #18
 8000b70:	d859      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b72:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <HAL_GPIO_Init+0x80>)
 8000b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b78:	08000bf3 	.word	0x08000bf3
 8000b7c:	08000bcd 	.word	0x08000bcd
 8000b80:	08000bdf 	.word	0x08000bdf
 8000b84:	08000c21 	.word	0x08000c21
 8000b88:	08000c27 	.word	0x08000c27
 8000b8c:	08000c27 	.word	0x08000c27
 8000b90:	08000c27 	.word	0x08000c27
 8000b94:	08000c27 	.word	0x08000c27
 8000b98:	08000c27 	.word	0x08000c27
 8000b9c:	08000c27 	.word	0x08000c27
 8000ba0:	08000c27 	.word	0x08000c27
 8000ba4:	08000c27 	.word	0x08000c27
 8000ba8:	08000c27 	.word	0x08000c27
 8000bac:	08000c27 	.word	0x08000c27
 8000bb0:	08000c27 	.word	0x08000c27
 8000bb4:	08000c27 	.word	0x08000c27
 8000bb8:	08000c27 	.word	0x08000c27
 8000bbc:	08000bd5 	.word	0x08000bd5
 8000bc0:	08000be9 	.word	0x08000be9
 8000bc4:	4a82      	ldr	r2, [pc, #520]	; (8000dd0 <HAL_GPIO_Init+0x2d8>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d013      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bca:	e02c      	b.n	8000c26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	623b      	str	r3, [r7, #32]
          break;
 8000bd2:	e029      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	623b      	str	r3, [r7, #32]
          break;
 8000bdc:	e024      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	3308      	adds	r3, #8
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e01f      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	330c      	adds	r3, #12
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	e01a      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d102      	bne.n	8000c00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	623b      	str	r3, [r7, #32]
          break;
 8000bfe:	e013      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d105      	bne.n	8000c14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	611a      	str	r2, [r3, #16]
          break;
 8000c12:	e009      	b.n	8000c28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c14:	2308      	movs	r3, #8
 8000c16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	615a      	str	r2, [r3, #20]
          break;
 8000c1e:	e003      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
          break;
 8000c24:	e000      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          break;
 8000c26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	2bff      	cmp	r3, #255	; 0xff
 8000c2c:	d801      	bhi.n	8000c32 <HAL_GPIO_Init+0x13a>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	e001      	b.n	8000c36 <HAL_GPIO_Init+0x13e>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3304      	adds	r3, #4
 8000c36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	2bff      	cmp	r3, #255	; 0xff
 8000c3c:	d802      	bhi.n	8000c44 <HAL_GPIO_Init+0x14c>
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	e002      	b.n	8000c4a <HAL_GPIO_Init+0x152>
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	3b08      	subs	r3, #8
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	210f      	movs	r1, #15
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	6a39      	ldr	r1, [r7, #32]
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	431a      	orrs	r2, r3
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 8090 	beq.w	8000d98 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c78:	4b56      	ldr	r3, [pc, #344]	; (8000dd4 <HAL_GPIO_Init+0x2dc>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a55      	ldr	r2, [pc, #340]	; (8000dd4 <HAL_GPIO_Init+0x2dc>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <HAL_GPIO_Init+0x2dc>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c90:	4a51      	ldr	r2, [pc, #324]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	089b      	lsrs	r3, r3, #2
 8000c96:	3302      	adds	r3, #2
 8000c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	220f      	movs	r2, #15
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a49      	ldr	r2, [pc, #292]	; (8000ddc <HAL_GPIO_Init+0x2e4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d00d      	beq.n	8000cd8 <HAL_GPIO_Init+0x1e0>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a48      	ldr	r2, [pc, #288]	; (8000de0 <HAL_GPIO_Init+0x2e8>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d007      	beq.n	8000cd4 <HAL_GPIO_Init+0x1dc>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a47      	ldr	r2, [pc, #284]	; (8000de4 <HAL_GPIO_Init+0x2ec>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d101      	bne.n	8000cd0 <HAL_GPIO_Init+0x1d8>
 8000ccc:	2302      	movs	r3, #2
 8000cce:	e004      	b.n	8000cda <HAL_GPIO_Init+0x1e2>
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e002      	b.n	8000cda <HAL_GPIO_Init+0x1e2>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e000      	b.n	8000cda <HAL_GPIO_Init+0x1e2>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cdc:	f002 0203 	and.w	r2, r2, #3
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	4093      	lsls	r3, r2
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cea:	493b      	ldr	r1, [pc, #236]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	3302      	adds	r3, #2
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d006      	beq.n	8000d12 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d04:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	4937      	ldr	r1, [pc, #220]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	608b      	str	r3, [r1, #8]
 8000d10:	e006      	b.n	8000d20 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d12:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	4933      	ldr	r1, [pc, #204]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d006      	beq.n	8000d3a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	492d      	ldr	r1, [pc, #180]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60cb      	str	r3, [r1, #12]
 8000d38:	e006      	b.n	8000d48 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4929      	ldr	r1, [pc, #164]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	4923      	ldr	r1, [pc, #140]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	604b      	str	r3, [r1, #4]
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	491f      	ldr	r1, [pc, #124]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4919      	ldr	r1, [pc, #100]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4915      	ldr	r1, [pc, #84]	; (8000de8 <HAL_GPIO_Init+0x2f0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	fa22 f303 	lsr.w	r3, r2, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f47f aeaf 	bne.w	8000b0c <HAL_GPIO_Init+0x14>
  }
}
 8000dae:	bf00      	nop
 8000db0:	bf00      	nop
 8000db2:	372c      	adds	r7, #44	; 0x2c
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	10320000 	.word	0x10320000
 8000dc0:	10310000 	.word	0x10310000
 8000dc4:	10220000 	.word	0x10220000
 8000dc8:	10210000 	.word	0x10210000
 8000dcc:	10120000 	.word	0x10120000
 8000dd0:	10110000 	.word	0x10110000
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40011000 	.word	0x40011000
 8000de8:	40010400 	.word	0x40010400

08000dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dfc:	787b      	ldrb	r3, [r7, #1]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e02:	887a      	ldrh	r2, [r7, #2]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e08:	e003      	b.n	8000e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	611a      	str	r2, [r3, #16]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4013      	ands	r3, r2
 8000e34:	041a      	lsls	r2, r3, #16
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	43d9      	mvns	r1, r3
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	400b      	ands	r3, r1
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	611a      	str	r2, [r3, #16]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
	...

08000e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e26c      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 8087 	beq.w	8000f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e70:	4b92      	ldr	r3, [pc, #584]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 030c 	and.w	r3, r3, #12
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	d00c      	beq.n	8000e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e7c:	4b8f      	ldr	r3, [pc, #572]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 030c 	and.w	r3, r3, #12
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d112      	bne.n	8000eae <HAL_RCC_OscConfig+0x5e>
 8000e88:	4b8c      	ldr	r3, [pc, #560]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e94:	d10b      	bne.n	8000eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e96:	4b89      	ldr	r3, [pc, #548]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d06c      	beq.n	8000f7c <HAL_RCC_OscConfig+0x12c>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d168      	bne.n	8000f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e246      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb6:	d106      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x76>
 8000eb8:	4b80      	ldr	r3, [pc, #512]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a7f      	ldr	r2, [pc, #508]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	e02e      	b.n	8000f24 <HAL_RCC_OscConfig+0xd4>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x98>
 8000ece:	4b7b      	ldr	r3, [pc, #492]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a7a      	ldr	r2, [pc, #488]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b78      	ldr	r3, [pc, #480]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a77      	ldr	r2, [pc, #476]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e01d      	b.n	8000f24 <HAL_RCC_OscConfig+0xd4>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0xbc>
 8000ef2:	4b72      	ldr	r3, [pc, #456]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a71      	ldr	r2, [pc, #452]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b6f      	ldr	r3, [pc, #444]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a6e      	ldr	r2, [pc, #440]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e00b      	b.n	8000f24 <HAL_RCC_OscConfig+0xd4>
 8000f0c:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a6a      	ldr	r2, [pc, #424]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b68      	ldr	r3, [pc, #416]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a67      	ldr	r2, [pc, #412]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d013      	beq.n	8000f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fc1a 	bl	8000764 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fc16 	bl	8000764 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	; 0x64
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e1fa      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f46:	4b5d      	ldr	r3, [pc, #372]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f0      	beq.n	8000f34 <HAL_RCC_OscConfig+0xe4>
 8000f52:	e014      	b.n	8000f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fc06 	bl	8000764 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fc02 	bl	8000764 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e1e6      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6e:	4b53      	ldr	r3, [pc, #332]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f0      	bne.n	8000f5c <HAL_RCC_OscConfig+0x10c>
 8000f7a:	e000      	b.n	8000f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d063      	beq.n	8001052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f8a:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f96:	4b49      	ldr	r3, [pc, #292]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d11c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x18c>
 8000fa2:	4b46      	ldr	r3, [pc, #280]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d116      	bne.n	8000fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fae:	4b43      	ldr	r3, [pc, #268]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x176>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d001      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e1ba      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc6:	4b3d      	ldr	r3, [pc, #244]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4939      	ldr	r1, [pc, #228]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fda:	e03a      	b.n	8001052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d020      	beq.n	8001026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fbbb 	bl	8000764 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fbb7 	bl	8000764 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e19b      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4927      	ldr	r1, [pc, #156]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8001020:	4313      	orrs	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
 8001024:	e015      	b.n	8001052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fb9a 	bl	8000764 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001034:	f7ff fb96 	bl	8000764 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e17a      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d03a      	beq.n	80010d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d019      	beq.n	800109a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_RCC_OscConfig+0x274>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106c:	f7ff fb7a 	bl	8000764 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001074:	f7ff fb76 	bl	8000764 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e15a      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_RCC_OscConfig+0x26c>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f000 facc 	bl	8001630 <RCC_Delay>
 8001098:	e01c      	b.n	80010d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_RCC_OscConfig+0x274>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a0:	f7ff fb60 	bl	8000764 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a6:	e00f      	b.n	80010c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a8:	f7ff fb5c 	bl	8000764 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d908      	bls.n	80010c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e140      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
 80010c0:	42420000 	.word	0x42420000
 80010c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c8:	4b9e      	ldr	r3, [pc, #632]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1e9      	bne.n	80010a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80a6 	beq.w	800122e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e6:	4b97      	ldr	r3, [pc, #604]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10d      	bne.n	800110e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b94      	ldr	r3, [pc, #592]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a93      	ldr	r2, [pc, #588]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b91      	ldr	r3, [pc, #580]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800110a:	2301      	movs	r3, #1
 800110c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110e:	4b8e      	ldr	r3, [pc, #568]	; (8001348 <HAL_RCC_OscConfig+0x4f8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	2b00      	cmp	r3, #0
 8001118:	d118      	bne.n	800114c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800111a:	4b8b      	ldr	r3, [pc, #556]	; (8001348 <HAL_RCC_OscConfig+0x4f8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a8a      	ldr	r2, [pc, #552]	; (8001348 <HAL_RCC_OscConfig+0x4f8>)
 8001120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001126:	f7ff fb1d 	bl	8000764 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112e:	f7ff fb19 	bl	8000764 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b64      	cmp	r3, #100	; 0x64
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e0fd      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001140:	4b81      	ldr	r3, [pc, #516]	; (8001348 <HAL_RCC_OscConfig+0x4f8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d106      	bne.n	8001162 <HAL_RCC_OscConfig+0x312>
 8001154:	4b7b      	ldr	r3, [pc, #492]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4a7a      	ldr	r2, [pc, #488]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6213      	str	r3, [r2, #32]
 8001160:	e02d      	b.n	80011be <HAL_RCC_OscConfig+0x36e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x334>
 800116a:	4b76      	ldr	r3, [pc, #472]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4a75      	ldr	r2, [pc, #468]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	6213      	str	r3, [r2, #32]
 8001176:	4b73      	ldr	r3, [pc, #460]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	4a72      	ldr	r2, [pc, #456]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 800117c:	f023 0304 	bic.w	r3, r3, #4
 8001180:	6213      	str	r3, [r2, #32]
 8001182:	e01c      	b.n	80011be <HAL_RCC_OscConfig+0x36e>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b05      	cmp	r3, #5
 800118a:	d10c      	bne.n	80011a6 <HAL_RCC_OscConfig+0x356>
 800118c:	4b6d      	ldr	r3, [pc, #436]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4a6c      	ldr	r2, [pc, #432]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6213      	str	r3, [r2, #32]
 8001198:	4b6a      	ldr	r3, [pc, #424]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4a69      	ldr	r2, [pc, #420]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6213      	str	r3, [r2, #32]
 80011a4:	e00b      	b.n	80011be <HAL_RCC_OscConfig+0x36e>
 80011a6:	4b67      	ldr	r3, [pc, #412]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a66      	ldr	r2, [pc, #408]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	4b64      	ldr	r3, [pc, #400]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a63      	ldr	r2, [pc, #396]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d015      	beq.n	80011f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c6:	f7ff facd 	bl	8000764 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011cc:	e00a      	b.n	80011e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f7ff fac9 	bl	8000764 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011dc:	4293      	cmp	r3, r2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e0ab      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e4:	4b57      	ldr	r3, [pc, #348]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0ee      	beq.n	80011ce <HAL_RCC_OscConfig+0x37e>
 80011f0:	e014      	b.n	800121c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fab7 	bl	8000764 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fab3 	bl	8000764 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	; 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e095      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001210:	4b4c      	ldr	r3, [pc, #304]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1ee      	bne.n	80011fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d105      	bne.n	800122e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001222:	4b48      	ldr	r3, [pc, #288]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a47      	ldr	r2, [pc, #284]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800122c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 8081 	beq.w	800133a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b08      	cmp	r3, #8
 8001242:	d061      	beq.n	8001308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d146      	bne.n	80012da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124c:	4b3f      	ldr	r3, [pc, #252]	; (800134c <HAL_RCC_OscConfig+0x4fc>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff fa87 	bl	8000764 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125a:	f7ff fa83 	bl	8000764 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e067      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126c:	4b35      	ldr	r3, [pc, #212]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f0      	bne.n	800125a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001280:	d108      	bne.n	8001294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	492d      	ldr	r1, [pc, #180]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a19      	ldr	r1, [r3, #32]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	430b      	orrs	r3, r1
 80012a6:	4927      	ldr	r1, [pc, #156]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <HAL_RCC_OscConfig+0x4fc>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b2:	f7ff fa57 	bl	8000764 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ba:	f7ff fa53 	bl	8000764 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e037      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x46a>
 80012d8:	e02f      	b.n	800133a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <HAL_RCC_OscConfig+0x4fc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fa40 	bl	8000764 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e8:	f7ff fa3c 	bl	8000764 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e020      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x498>
 8001306:	e018      	b.n	800133a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e013      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_RCC_OscConfig+0x4f4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	429a      	cmp	r2, r3
 8001326:	d106      	bne.n	8001336 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001332:	429a      	cmp	r2, r3
 8001334:	d001      	beq.n	800133a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	40007000 	.word	0x40007000
 800134c:	42420060 	.word	0x42420060

08001350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e0d0      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d910      	bls.n	8001394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001372:	4b67      	ldr	r3, [pc, #412]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 0207 	bic.w	r2, r3, #7
 800137a:	4965      	ldr	r1, [pc, #404]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001382:	4b63      	ldr	r3, [pc, #396]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0b8      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ac:	4b59      	ldr	r3, [pc, #356]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a58      	ldr	r2, [pc, #352]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c4:	4b53      	ldr	r3, [pc, #332]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4a52      	ldr	r2, [pc, #328]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d0:	4b50      	ldr	r3, [pc, #320]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	494d      	ldr	r1, [pc, #308]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d040      	beq.n	8001470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	4b47      	ldr	r3, [pc, #284]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d115      	bne.n	800142e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e07f      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d107      	bne.n	800141e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e073      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141e:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e06b      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800142e:	4b39      	ldr	r3, [pc, #228]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f023 0203 	bic.w	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4936      	ldr	r1, [pc, #216]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001440:	f7ff f990 	bl	8000764 <HAL_GetTick>
 8001444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001446:	e00a      	b.n	800145e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001448:	f7ff f98c 	bl	8000764 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e053      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 020c 	and.w	r2, r3, #12
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	429a      	cmp	r2, r3
 800146e:	d1eb      	bne.n	8001448 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d210      	bcs.n	80014a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 0207 	bic.w	r2, r3, #7
 8001486:	4922      	ldr	r1, [pc, #136]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e032      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4916      	ldr	r1, [pc, #88]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d009      	beq.n	80014de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	490e      	ldr	r1, [pc, #56]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014de:	f000 f821 	bl	8001524 <HAL_RCC_GetSysClockFreq>
 80014e2:	4602      	mov	r2, r0
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	490a      	ldr	r1, [pc, #40]	; (8001518 <HAL_RCC_ClockConfig+0x1c8>)
 80014f0:	5ccb      	ldrb	r3, [r1, r3]
 80014f2:	fa22 f303 	lsr.w	r3, r2, r3
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <HAL_RCC_ClockConfig+0x1cc>)
 80014f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_RCC_ClockConfig+0x1d0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f8ee 	bl	80006e0 <HAL_InitTick>

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40022000 	.word	0x40022000
 8001514:	40021000 	.word	0x40021000
 8001518:	0800368c 	.word	0x0800368c
 800151c:	20000000 	.word	0x20000000
 8001520:	20000004 	.word	0x20000004

08001524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b04      	cmp	r3, #4
 800154c:	d002      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0x30>
 800154e:	2b08      	cmp	r3, #8
 8001550:	d003      	beq.n	800155a <HAL_RCC_GetSysClockFreq+0x36>
 8001552:	e027      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001556:	613b      	str	r3, [r7, #16]
      break;
 8001558:	e027      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	0c9b      	lsrs	r3, r3, #18
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d010      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	0c5b      	lsrs	r3, r3, #17
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001586:	fb02 f203 	mul.w	r2, r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e004      	b.n	800159e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	613b      	str	r3, [r7, #16]
      break;
 80015a2:	e002      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_RCC_GetSysClockFreq+0x98>)
 80015a6:	613b      	str	r3, [r7, #16]
      break;
 80015a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015aa:	693b      	ldr	r3, [r7, #16]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	371c      	adds	r7, #28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	007a1200 	.word	0x007a1200
 80015c0:	080036a4 	.word	0x080036a4
 80015c4:	080036b4 	.word	0x080036b4
 80015c8:	003d0900 	.word	0x003d0900

080015cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <HAL_RCC_GetHCLKFreq+0x10>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000000 	.word	0x20000000

080015e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015e4:	f7ff fff2 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	4903      	ldr	r1, [pc, #12]	; (8001604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	0800369c 	.word	0x0800369c

08001608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800160c:	f7ff ffde 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 8001610:	4602      	mov	r2, r0
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	0adb      	lsrs	r3, r3, #11
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	4903      	ldr	r1, [pc, #12]	; (800162c <HAL_RCC_GetPCLK2Freq+0x24>)
 800161e:	5ccb      	ldrb	r3, [r1, r3]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	0800369c 	.word	0x0800369c

08001630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <RCC_Delay+0x34>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <RCC_Delay+0x38>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0a5b      	lsrs	r3, r3, #9
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800164c:	bf00      	nop
  }
  while (Delay --);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	60fa      	str	r2, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f9      	bne.n	800164c <RCC_Delay+0x1c>
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	20000000 	.word	0x20000000
 8001668:	10624dd3 	.word	0x10624dd3

0800166c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e041      	b.n	8001702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe fefa 	bl	800048c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3304      	adds	r3, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	4610      	mov	r0, r2
 80016ac:	f000 fa56 	bl	8001b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b01      	cmp	r3, #1
 800171e:	d001      	beq.n	8001724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e035      	b.n	8001790 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a16      	ldr	r2, [pc, #88]	; (800179c <HAL_TIM_Base_Start_IT+0x90>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d009      	beq.n	800175a <HAL_TIM_Base_Start_IT+0x4e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174e:	d004      	beq.n	800175a <HAL_TIM_Base_Start_IT+0x4e>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <HAL_TIM_Base_Start_IT+0x94>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d111      	bne.n	800177e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b06      	cmp	r3, #6
 800176a:	d010      	beq.n	800178e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800177c:	e007      	b.n	800178e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40012c00 	.word	0x40012c00
 80017a0:	40000400 	.word	0x40000400

080017a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d020      	beq.n	8001808 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01b      	beq.n	8001808 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0202 	mvn.w	r2, #2
 80017d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f998 	bl	8001b24 <HAL_TIM_IC_CaptureCallback>
 80017f4:	e005      	b.n	8001802 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f98b 	bl	8001b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f99a 	bl	8001b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	d020      	beq.n	8001854 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01b      	beq.n	8001854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f06f 0204 	mvn.w	r2, #4
 8001824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2202      	movs	r2, #2
 800182a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f972 	bl	8001b24 <HAL_TIM_IC_CaptureCallback>
 8001840:	e005      	b.n	800184e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f965 	bl	8001b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f974 	bl	8001b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d020      	beq.n	80018a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01b      	beq.n	80018a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0208 	mvn.w	r2, #8
 8001870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2204      	movs	r2, #4
 8001876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f94c 	bl	8001b24 <HAL_TIM_IC_CaptureCallback>
 800188c:	e005      	b.n	800189a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f93f 	bl	8001b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f94e 	bl	8001b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d020      	beq.n	80018ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01b      	beq.n	80018ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f06f 0210 	mvn.w	r2, #16
 80018bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2208      	movs	r2, #8
 80018c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f926 	bl	8001b24 <HAL_TIM_IC_CaptureCallback>
 80018d8:	e005      	b.n	80018e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f919 	bl	8001b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f928 	bl	8001b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00c      	beq.n	8001910 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0201 	mvn.w	r2, #1
 8001908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7fe fd74 	bl	80003f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00c      	beq.n	8001934 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800192c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fa6f 	bl	8001e12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00c      	beq.n	8001958 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f8f8 	bl	8001b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00c      	beq.n	800197c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f06f 0220 	mvn.w	r2, #32
 8001974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fa42 	bl	8001e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_TIM_ConfigClockSource+0x1c>
 800199c:	2302      	movs	r3, #2
 800199e:	e0b4      	b.n	8001b0a <HAL_TIM_ConfigClockSource+0x186>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80019be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d8:	d03e      	beq.n	8001a58 <HAL_TIM_ConfigClockSource+0xd4>
 80019da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019de:	f200 8087 	bhi.w	8001af0 <HAL_TIM_ConfigClockSource+0x16c>
 80019e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e6:	f000 8086 	beq.w	8001af6 <HAL_TIM_ConfigClockSource+0x172>
 80019ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ee:	d87f      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x16c>
 80019f0:	2b70      	cmp	r3, #112	; 0x70
 80019f2:	d01a      	beq.n	8001a2a <HAL_TIM_ConfigClockSource+0xa6>
 80019f4:	2b70      	cmp	r3, #112	; 0x70
 80019f6:	d87b      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x16c>
 80019f8:	2b60      	cmp	r3, #96	; 0x60
 80019fa:	d050      	beq.n	8001a9e <HAL_TIM_ConfigClockSource+0x11a>
 80019fc:	2b60      	cmp	r3, #96	; 0x60
 80019fe:	d877      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x16c>
 8001a00:	2b50      	cmp	r3, #80	; 0x50
 8001a02:	d03c      	beq.n	8001a7e <HAL_TIM_ConfigClockSource+0xfa>
 8001a04:	2b50      	cmp	r3, #80	; 0x50
 8001a06:	d873      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x16c>
 8001a08:	2b40      	cmp	r3, #64	; 0x40
 8001a0a:	d058      	beq.n	8001abe <HAL_TIM_ConfigClockSource+0x13a>
 8001a0c:	2b40      	cmp	r3, #64	; 0x40
 8001a0e:	d86f      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x16c>
 8001a10:	2b30      	cmp	r3, #48	; 0x30
 8001a12:	d064      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0x15a>
 8001a14:	2b30      	cmp	r3, #48	; 0x30
 8001a16:	d86b      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x16c>
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d060      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0x15a>
 8001a1c:	2b20      	cmp	r3, #32
 8001a1e:	d867      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x16c>
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d05c      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0x15a>
 8001a24:	2b10      	cmp	r3, #16
 8001a26:	d05a      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0x15a>
 8001a28:	e062      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6899      	ldr	r1, [r3, #8]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f000 f96a 	bl	8001d12 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	609a      	str	r2, [r3, #8]
      break;
 8001a56:	e04f      	b.n	8001af8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6899      	ldr	r1, [r3, #8]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f000 f953 	bl	8001d12 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a7a:	609a      	str	r2, [r3, #8]
      break;
 8001a7c:	e03c      	b.n	8001af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f000 f8ca 	bl	8001c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2150      	movs	r1, #80	; 0x50
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f921 	bl	8001cde <TIM_ITRx_SetConfig>
      break;
 8001a9c:	e02c      	b.n	8001af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f000 f8e8 	bl	8001c80 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2160      	movs	r1, #96	; 0x60
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f911 	bl	8001cde <TIM_ITRx_SetConfig>
      break;
 8001abc:	e01c      	b.n	8001af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f000 f8aa 	bl	8001c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2140      	movs	r1, #64	; 0x40
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f901 	bl	8001cde <TIM_ITRx_SetConfig>
      break;
 8001adc:	e00c      	b.n	8001af8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4610      	mov	r0, r2
 8001aea:	f000 f8f8 	bl	8001cde <TIM_ITRx_SetConfig>
      break;
 8001aee:	e003      	b.n	8001af8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
      break;
 8001af4:	e000      	b.n	8001af8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
	...

08001b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a2b      	ldr	r2, [pc, #172]	; (8001c1c <TIM_Base_SetConfig+0xc0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d007      	beq.n	8001b84 <TIM_Base_SetConfig+0x28>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d003      	beq.n	8001b84 <TIM_Base_SetConfig+0x28>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <TIM_Base_SetConfig+0xc4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d108      	bne.n	8001b96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a20      	ldr	r2, [pc, #128]	; (8001c1c <TIM_Base_SetConfig+0xc0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <TIM_Base_SetConfig+0x52>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba4:	d003      	beq.n	8001bae <TIM_Base_SetConfig+0x52>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a1d      	ldr	r2, [pc, #116]	; (8001c20 <TIM_Base_SetConfig+0xc4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d108      	bne.n	8001bc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <TIM_Base_SetConfig+0xc0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d103      	bne.n	8001bf4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f023 0201 	bic.w	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	611a      	str	r2, [r3, #16]
  }
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40000400 	.word	0x40000400

08001c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	f023 0201 	bic.w	r2, r3, #1
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f023 030a 	bic.w	r3, r3, #10
 8001c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	621a      	str	r2, [r3, #32]
}
 8001c76:	bf00      	nop
 8001c78:	371c      	adds	r7, #28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	f023 0210 	bic.w	r2, r3, #16
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	031b      	lsls	r3, r3, #12
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	621a      	str	r2, [r3, #32]
}
 8001cd4:	bf00      	nop
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f043 0307 	orr.w	r3, r3, #7
 8001d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	609a      	str	r2, [r3, #8]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b087      	sub	sp, #28
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	021a      	lsls	r2, r3, #8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	431a      	orrs	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	609a      	str	r2, [r3, #8]
}
 8001d46:	bf00      	nop
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e041      	b.n	8001dec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d004      	beq.n	8001dc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d10c      	bne.n	8001dda <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40012c00 	.word	0x40012c00
 8001dfc:	40000400 	.word	0x40000400

08001e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e042      	b.n	8001ebc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fb42 	bl	80004d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fd63 	bl	8002934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	d175      	bne.n	8001fd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_UART_Transmit+0x2c>
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e06e      	b.n	8001fd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2221      	movs	r2, #33	; 0x21
 8001efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f02:	f7fe fc2f 	bl	8000764 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	88fa      	ldrh	r2, [r7, #6]
 8001f12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1c:	d108      	bne.n	8001f30 <HAL_UART_Transmit+0x6c>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d104      	bne.n	8001f30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	e003      	b.n	8001f38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f38:	e02e      	b.n	8001f98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2200      	movs	r2, #0
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 fb01 	bl	800254c <UART_WaitOnFlagUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e03a      	b.n	8001fd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10b      	bne.n	8001f7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	3302      	adds	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	e007      	b.n	8001f8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3301      	adds	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1cb      	bne.n	8001f3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2140      	movs	r1, #64	; 0x40
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 facd 	bl	800254c <UART_WaitOnFlagUntilTimeout>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e006      	b.n	8001fd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e000      	b.n	8001fd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001fd0:	2302      	movs	r3, #2
  }
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b0ba      	sub	sp, #232	; 0xe8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800200e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800201a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10f      	bne.n	8002042 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_UART_IRQHandler+0x66>
 800202e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fbbc 	bl	80027b8 <UART_Receive_IT>
      return;
 8002040:	e25b      	b.n	80024fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80de 	beq.w	8002208 <HAL_UART_IRQHandler+0x22c>
 800204c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d106      	bne.n	8002066 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800205c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80d1 	beq.w	8002208 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_UART_IRQHandler+0xae>
 8002072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800208a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_UART_IRQHandler+0xd2>
 8002096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f043 0202 	orr.w	r2, r3, #2
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_UART_IRQHandler+0xf6>
 80020ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f043 0204 	orr.w	r2, r3, #4
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d011      	beq.n	8002102 <HAL_UART_IRQHandler+0x126>
 80020de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d105      	bne.n	80020f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f043 0208 	orr.w	r2, r3, #8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 81f2 	beq.w	80024f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800210c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_UART_IRQHandler+0x14e>
 8002118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fb47 	bl	80027b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <HAL_UART_IRQHandler+0x17a>
 800214e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002152:	2b00      	cmp	r3, #0
 8002154:	d04f      	beq.n	80021f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fa51 	bl	80025fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d041      	beq.n	80021ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3314      	adds	r3, #20
 8002170:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002174:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002178:	e853 3f00 	ldrex	r3, [r3]
 800217c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3314      	adds	r3, #20
 8002192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002196:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800219a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800219e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80021a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021a6:	e841 2300 	strex	r3, r2, [r1]
 80021aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80021ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1d9      	bne.n	800216a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d013      	beq.n	80021e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	4a7e      	ldr	r2, [pc, #504]	; (80023bc <HAL_UART_IRQHandler+0x3e0>)
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fc1c 	bl	8000a08 <HAL_DMA_Abort_IT>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021e0:	4610      	mov	r0, r2
 80021e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e4:	e00e      	b.n	8002204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f99c 	bl	8002524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ec:	e00a      	b.n	8002204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f998 	bl	8002524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f4:	e006      	b.n	8002204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f994 	bl	8002524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002202:	e175      	b.n	80024f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002204:	bf00      	nop
    return;
 8002206:	e173      	b.n	80024f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	2b01      	cmp	r3, #1
 800220e:	f040 814f 	bne.w	80024b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8148 	beq.w	80024b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8141 	beq.w	80024b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80b6 	beq.w	80023c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002260:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8145 	beq.w	80024f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800226e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002272:	429a      	cmp	r2, r3
 8002274:	f080 813e 	bcs.w	80024f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800227e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b20      	cmp	r3, #32
 8002288:	f000 8088 	beq.w	800239c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	330c      	adds	r3, #12
 8002292:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002296:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800229a:	e853 3f00 	ldrex	r3, [r3]
 800229e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80022a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	330c      	adds	r3, #12
 80022b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80022b8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022c8:	e841 2300 	strex	r3, r2, [r1]
 80022cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80022d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1d9      	bne.n	800228c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3314      	adds	r3, #20
 80022de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e2:	e853 3f00 	ldrex	r3, [r3]
 80022e6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80022e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3314      	adds	r3, #20
 80022f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002300:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002302:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002304:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002308:	e841 2300 	strex	r3, r2, [r1]
 800230c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800230e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e1      	bne.n	80022d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3314      	adds	r3, #20
 800231a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800231c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800231e:	e853 3f00 	ldrex	r3, [r3]
 8002322:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800232a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3314      	adds	r3, #20
 8002334:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002338:	66fa      	str	r2, [r7, #108]	; 0x6c
 800233a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800233e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002340:	e841 2300 	strex	r3, r2, [r1]
 8002344:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e3      	bne.n	8002314 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	330c      	adds	r3, #12
 8002360:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002364:	e853 3f00 	ldrex	r3, [r3]
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800236a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236c:	f023 0310 	bic.w	r3, r3, #16
 8002370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	330c      	adds	r3, #12
 800237a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800237e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002380:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002382:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002384:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002386:	e841 2300 	strex	r3, r2, [r1]
 800238a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800238c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1e3      	bne.n	800235a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fafb 	bl	8000992 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	4619      	mov	r1, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8bf 	bl	8002536 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023b8:	e09c      	b.n	80024f4 <HAL_UART_IRQHandler+0x518>
 80023ba:	bf00      	nop
 80023bc:	080026c3 	.word	0x080026c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 808e 	beq.w	80024f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8089 	beq.w	80024f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	330c      	adds	r3, #12
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	e853 3f00 	ldrex	r3, [r3]
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800240a:	647a      	str	r2, [r7, #68]	; 0x44
 800240c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002412:	e841 2300 	strex	r3, r2, [r1]
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1e3      	bne.n	80023e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3314      	adds	r3, #20
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	e853 3f00 	ldrex	r3, [r3]
 800242c:	623b      	str	r3, [r7, #32]
   return(result);
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3314      	adds	r3, #20
 800243e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002442:	633a      	str	r2, [r7, #48]	; 0x30
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800244a:	e841 2300 	strex	r3, r2, [r1]
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1e3      	bne.n	800241e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	330c      	adds	r3, #12
 800246a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	e853 3f00 	ldrex	r3, [r3]
 8002472:	60fb      	str	r3, [r7, #12]
   return(result);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0310 	bic.w	r3, r3, #16
 800247a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	330c      	adds	r3, #12
 8002484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002488:	61fa      	str	r2, [r7, #28]
 800248a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248c:	69b9      	ldr	r1, [r7, #24]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	e841 2300 	strex	r3, r2, [r1]
 8002494:	617b      	str	r3, [r7, #20]
   return(result);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e3      	bne.n	8002464 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024a6:	4619      	mov	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f844 	bl	8002536 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024ae:	e023      	b.n	80024f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d009      	beq.n	80024d0 <HAL_UART_IRQHandler+0x4f4>
 80024bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f90e 	bl	80026ea <UART_Transmit_IT>
    return;
 80024ce:	e014      	b.n	80024fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00e      	beq.n	80024fa <HAL_UART_IRQHandler+0x51e>
 80024dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f94d 	bl	8002788 <UART_EndTransmit_IT>
    return;
 80024ee:	e004      	b.n	80024fa <HAL_UART_IRQHandler+0x51e>
    return;
 80024f0:	bf00      	nop
 80024f2:	e002      	b.n	80024fa <HAL_UART_IRQHandler+0x51e>
      return;
 80024f4:	bf00      	nop
 80024f6:	e000      	b.n	80024fa <HAL_UART_IRQHandler+0x51e>
      return;
 80024f8:	bf00      	nop
  }
}
 80024fa:	37e8      	adds	r7, #232	; 0xe8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800255c:	e03b      	b.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d037      	beq.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002566:	f7fe f8fd 	bl	8000764 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	6a3a      	ldr	r2, [r7, #32]
 8002572:	429a      	cmp	r2, r3
 8002574:	d302      	bcc.n	800257c <UART_WaitOnFlagUntilTimeout+0x30>
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e03a      	b.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d023      	beq.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b80      	cmp	r3, #128	; 0x80
 8002592:	d020      	beq.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b40      	cmp	r3, #64	; 0x40
 8002598:	d01d      	beq.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d116      	bne.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f81d 	bl	80025fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2208      	movs	r2, #8
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00f      	b.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4013      	ands	r3, r2
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d0b4      	beq.n	800255e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025fe:	b480      	push	{r7}
 8002600:	b095      	sub	sp, #84	; 0x54
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002610:	e853 3f00 	ldrex	r3, [r3]
 8002614:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800261c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002626:	643a      	str	r2, [r7, #64]	; 0x40
 8002628:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800262c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e5      	bne.n	8002606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3314      	adds	r3, #20
 8002640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	61fb      	str	r3, [r7, #28]
   return(result);
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	64bb      	str	r3, [r7, #72]	; 0x48
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3314      	adds	r3, #20
 8002658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800265a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002662:	e841 2300 	strex	r3, r2, [r1]
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e5      	bne.n	800263a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	2b01      	cmp	r3, #1
 8002674:	d119      	bne.n	80026aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	330c      	adds	r3, #12
 800267c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	e853 3f00 	ldrex	r3, [r3]
 8002684:	60bb      	str	r3, [r7, #8]
   return(result);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f023 0310 	bic.w	r3, r3, #16
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002696:	61ba      	str	r2, [r7, #24]
 8002698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	6979      	ldr	r1, [r7, #20]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	e841 2300 	strex	r3, r2, [r1]
 80026a2:	613b      	str	r3, [r7, #16]
   return(result);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1e5      	bne.n	8002676 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026b8:	bf00      	nop
 80026ba:	3754      	adds	r7, #84	; 0x54
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff ff21 	bl	8002524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b21      	cmp	r3, #33	; 0x21
 80026fc:	d13e      	bne.n	800277c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002706:	d114      	bne.n	8002732 <UART_Transmit_IT+0x48>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d110      	bne.n	8002732 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002724:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	1c9a      	adds	r2, r3, #2
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	621a      	str	r2, [r3, #32]
 8002730:	e008      	b.n	8002744 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	1c59      	adds	r1, r3, #1
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6211      	str	r1, [r2, #32]
 800273c:	781a      	ldrb	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29b      	uxth	r3, r3
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4619      	mov	r1, r3
 8002752:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10f      	bne.n	8002778 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002766:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002776:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800279e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff fea9 	bl	8002500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	; 0x30
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b22      	cmp	r3, #34	; 0x22
 80027ca:	f040 80ae 	bne.w	800292a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d6:	d117      	bne.n	8002808 <UART_Receive_IT+0x50>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d113      	bne.n	8002808 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	1c9a      	adds	r2, r3, #2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
 8002806:	e026      	b.n	8002856 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800280e:	2300      	movs	r3, #0
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281a:	d007      	beq.n	800282c <UART_Receive_IT+0x74>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <UART_Receive_IT+0x82>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d106      	bne.n	800283a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	e008      	b.n	800284c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002846:	b2da      	uxtb	r2, r3
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29b      	uxth	r3, r3
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4619      	mov	r1, r3
 8002864:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002866:	2b00      	cmp	r3, #0
 8002868:	d15d      	bne.n	8002926 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0220 	bic.w	r2, r2, #32
 8002878:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002888:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d135      	bne.n	800291c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	e853 3f00 	ldrex	r3, [r3]
 80028c4:	613b      	str	r3, [r7, #16]
   return(result);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f023 0310 	bic.w	r3, r3, #16
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	330c      	adds	r3, #12
 80028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d6:	623a      	str	r2, [r7, #32]
 80028d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028da:	69f9      	ldr	r1, [r7, #28]
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1e5      	bne.n	80028b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b10      	cmp	r3, #16
 80028f6:	d10a      	bne.n	800290e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fe0e 	bl	8002536 <HAL_UARTEx_RxEventCallback>
 800291a:	e002      	b.n	8002922 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fdf8 	bl	8002512 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e002      	b.n	800292c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800292a:	2302      	movs	r3, #2
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	3730      	adds	r7, #48	; 0x30
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800296e:	f023 030c 	bic.w	r3, r3, #12
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	430b      	orrs	r3, r1
 800297a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2c      	ldr	r2, [pc, #176]	; (8002a48 <UART_SetConfig+0x114>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d103      	bne.n	80029a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800299c:	f7fe fe34 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	e002      	b.n	80029aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029a4:	f7fe fe1c 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 80029a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009a      	lsls	r2, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <UART_SetConfig+0x118>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	0119      	lsls	r1, r3, #4
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	009a      	lsls	r2, r3, #2
 80029d4:	441a      	add	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <UART_SetConfig+0x118>)
 80029e2:	fba3 0302 	umull	r0, r3, r3, r2
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2064      	movs	r0, #100	; 0x64
 80029ea:	fb00 f303 	mul.w	r3, r0, r3
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	3332      	adds	r3, #50	; 0x32
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <UART_SetConfig+0x118>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a00:	4419      	add	r1, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	009a      	lsls	r2, r3, #2
 8002a0c:	441a      	add	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <UART_SetConfig+0x118>)
 8002a1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2064      	movs	r0, #100	; 0x64
 8002a22:	fb00 f303 	mul.w	r3, r0, r3
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	3332      	adds	r3, #50	; 0x32
 8002a2c:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <UART_SetConfig+0x118>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	f003 020f 	and.w	r2, r3, #15
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	51eb851f 	.word	0x51eb851f

08002a50 <SCH_INIT>:

#include "scheduler.h"
sTasks SCH_Tasks_G[SCH_MAX_TACKS];
uint8_t current_index_task = 0;
#define time_cycle 10
void SCH_INIT(void){
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
	current_index_task = 0;
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <SCH_INIT+0x14>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000094 	.word	0x20000094

08002a68 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(),int32_t DELAY,uint32_t PERIOD){
 8002a68:	b4b0      	push	{r4, r5, r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
	DELAY = DELAY / time_cycle;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4a54      	ldr	r2, [pc, #336]	; (8002bc8 <SCH_Add_Task+0x160>)
 8002a78:	fb82 1203 	smull	r1, r2, r2, r3
 8002a7c:	1092      	asrs	r2, r2, #2
 8002a7e:	17db      	asrs	r3, r3, #31
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	60bb      	str	r3, [r7, #8]
	PERIOD = PERIOD / time_cycle;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a51      	ldr	r2, [pc, #324]	; (8002bcc <SCH_Add_Task+0x164>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	607b      	str	r3, [r7, #4]
	int index_add = current_index_task;
 8002a90:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <SCH_Add_Task+0x168>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	61fb      	str	r3, [r7, #28]
	if(current_index_task < SCH_MAX_TACKS){
 8002a96:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <SCH_Add_Task+0x168>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b27      	cmp	r3, #39	; 0x27
 8002a9c:	f200 808f 	bhi.w	8002bbe <SCH_Add_Task+0x156>
		for(int i =0 ; i<current_index_task ;i++){
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	e01e      	b.n	8002ae4 <SCH_Add_Task+0x7c>
			if(SCH_Tasks_G[i].Delay <= DELAY)
 8002aa6:	494b      	ldr	r1, [pc, #300]	; (8002bd4 <SCH_Add_Task+0x16c>)
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	db0c      	blt.n	8002ad8 <SCH_Add_Task+0x70>
				DELAY -= SCH_Tasks_G[i].Delay;
 8002abe:	4945      	ldr	r1, [pc, #276]	; (8002bd4 <SCH_Add_Task+0x16c>)
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3304      	adds	r3, #4
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	e002      	b.n	8002ade <SCH_Add_Task+0x76>
			else{
				index_add = i;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	61fb      	str	r3, [r7, #28]
				break;
 8002adc:	e008      	b.n	8002af0 <SCH_Add_Task+0x88>
		for(int i =0 ; i<current_index_task ;i++){
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	4b3a      	ldr	r3, [pc, #232]	; (8002bd0 <SCH_Add_Task+0x168>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4293      	cmp	r3, r2
 8002aee:	dbda      	blt.n	8002aa6 <SCH_Add_Task+0x3e>
			}
		}
		for(int i = current_index_task;i>index_add;i--){
 8002af0:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <SCH_Add_Task+0x168>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	e017      	b.n	8002b28 <SCH_Add_Task+0xc0>
			SCH_Tasks_G[i] = SCH_Tasks_G[i-1];
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	1e5a      	subs	r2, r3, #1
 8002afc:	4835      	ldr	r0, [pc, #212]	; (8002bd4 <SCH_Add_Task+0x16c>)
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	460b      	mov	r3, r1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4418      	add	r0, r3
 8002b0a:	4932      	ldr	r1, [pc, #200]	; (8002bd4 <SCH_Add_Task+0x16c>)
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	4604      	mov	r4, r0
 8002b18:	461d      	mov	r5, r3
 8002b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b1e:	682b      	ldr	r3, [r5, #0]
 8002b20:	6023      	str	r3, [r4, #0]
		for(int i = current_index_task;i>index_add;i--){
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	dce3      	bgt.n	8002af8 <SCH_Add_Task+0x90>
		}
		current_index_task++;
 8002b30:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <SCH_Add_Task+0x168>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	3301      	adds	r3, #1
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <SCH_Add_Task+0x168>)
 8002b3a:	701a      	strb	r2, [r3, #0]
		SCH_Tasks_G[index_add].pTask = pFunction;
 8002b3c:	4925      	ldr	r1, [pc, #148]	; (8002bd4 <SCH_Add_Task+0x16c>)
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[index_add].Delay = DELAY ;
 8002b4e:	4921      	ldr	r1, [pc, #132]	; (8002bd4 <SCH_Add_Task+0x16c>)
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[index_add].Period = PERIOD ;
 8002b62:	491c      	ldr	r1, [pc, #112]	; (8002bd4 <SCH_Add_Task+0x16c>)
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3308      	adds	r3, #8
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	601a      	str	r2, [r3, #0]
		if(index_add < current_index_task - 1)	// Truong hop khong add vao cuoi
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <SCH_Add_Task+0x168>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	da1d      	bge.n	8002bbe <SCH_Add_Task+0x156>
			SCH_Tasks_G[index_add+1].Delay -= SCH_Tasks_G[index_add].Delay;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	4913      	ldr	r1, [pc, #76]	; (8002bd4 <SCH_Add_Task+0x16c>)
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3304      	adds	r3, #4
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	480f      	ldr	r0, [pc, #60]	; (8002bd4 <SCH_Add_Task+0x16c>)
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4403      	add	r3, r0
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	3201      	adds	r2, #1
 8002bac:	1ac9      	subs	r1, r1, r3
 8002bae:	4809      	ldr	r0, [pc, #36]	; (8002bd4 <SCH_Add_Task+0x16c>)
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4403      	add	r3, r0
 8002bba:	3304      	adds	r3, #4
 8002bbc:	6019      	str	r1, [r3, #0]
	}

}
 8002bbe:	bf00      	nop
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bcb0      	pop	{r4, r5, r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	66666667 	.word	0x66666667
 8002bcc:	cccccccd 	.word	0xcccccccd
 8002bd0:	20000094 	.word	0x20000094
 8002bd4:	20000134 	.word	0x20000134

08002bd8 <SCH_Update>:

void SCH_Update(void){
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
    if(current_index_task == 0){
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <SCH_Update+0x40>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d014      	beq.n	8002c0e <SCH_Update+0x36>
        return; // Không có tác vụ nào để cập nhật
    }

    if(SCH_Tasks_G[0].Delay > 0){
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <SCH_Update+0x44>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	dd0b      	ble.n	8002c04 <SCH_Update+0x2c>
        SCH_Tasks_G[0].Delay--;
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <SCH_Update+0x44>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <SCH_Update+0x44>)
 8002bf4:	6053      	str	r3, [r2, #4]
    }

    while(SCH_Tasks_G[0].Delay == 0){
 8002bf6:	e005      	b.n	8002c04 <SCH_Update+0x2c>
       SCH_Tasks_G[0].RunMe++;
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <SCH_Update+0x44>)
 8002bfa:	7b1b      	ldrb	r3, [r3, #12]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <SCH_Update+0x44>)
 8002c02:	731a      	strb	r2, [r3, #12]
    while(SCH_Tasks_G[0].Delay == 0){
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <SCH_Update+0x44>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f5      	beq.n	8002bf8 <SCH_Update+0x20>
 8002c0c:	e000      	b.n	8002c10 <SCH_Update+0x38>
        return; // Không có tác vụ nào để cập nhật
 8002c0e:	bf00      	nop
    }
}
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000094 	.word	0x20000094
 8002c1c:	20000134 	.word	0x20000134

08002c20 <SCH_Dispatch_Task>:



void SCH_Dispatch_Task(void){
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
    while(SCH_Tasks_G[0].RunMe > 0){
 8002c26:	e02e      	b.n	8002c86 <SCH_Dispatch_Task+0x66>
        SCH_Tasks_G[0].RunMe--;
 8002c28:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <SCH_Dispatch_Task+0x78>)
 8002c2a:	7b1b      	ldrb	r3, [r3, #12]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <SCH_Dispatch_Task+0x78>)
 8002c32:	731a      	strb	r2, [r3, #12]
        (*SCH_Tasks_G[0].pTask)();
 8002c34:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <SCH_Dispatch_Task+0x78>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4798      	blx	r3
            if(SCH_Tasks_G[0].Period > 0){
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <SCH_Dispatch_Task+0x78>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01e      	beq.n	8002c80 <SCH_Dispatch_Task+0x60>
                SCH_Tasks_G[0].Delay = SCH_Tasks_G[0].Period;
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <SCH_Dispatch_Task+0x78>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <SCH_Dispatch_Task+0x78>)
 8002c4a:	605a      	str	r2, [r3, #4]
                sTasks tempTask = SCH_Tasks_G[0];
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <SCH_Dispatch_Task+0x78>)
 8002c4e:	1d3c      	adds	r4, r7, #4
 8002c50:	461d      	mov	r5, r3
 8002c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c56:	682b      	ldr	r3, [r5, #0]
 8002c58:	6023      	str	r3, [r4, #0]
                SCH_Delete(0);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f000 f82c 	bl	8002cb8 <SCH_Delete>
                SCH_Add_Task(tempTask.pTask, tempTask.Delay * time_cycle , tempTask.Period * time_cycle);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f7ff fef5 	bl	8002a68 <SCH_Add_Task>
 8002c7e:	e002      	b.n	8002c86 <SCH_Dispatch_Task+0x66>
            } else {
                // OneShortTask
                SCH_Delete(0);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f000 f819 	bl	8002cb8 <SCH_Delete>
    while(SCH_Tasks_G[0].RunMe > 0){
 8002c86:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <SCH_Dispatch_Task+0x78>)
 8002c88:	7b1b      	ldrb	r3, [r3, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1cc      	bne.n	8002c28 <SCH_Dispatch_Task+0x8>
            }
    }

}
 8002c8e:	bf00      	nop
 8002c90:	bf00      	nop
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bdb0      	pop	{r4, r5, r7, pc}
 8002c98:	20000134 	.word	0x20000134

08002c9c <SCH_Add_Oneshort_tasks>:



void SCH_Add_Oneshort_tasks(void (*pFunction)(),int32_t DELAY){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
	SCH_Add_Task(pFunction, DELAY, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	6839      	ldr	r1, [r7, #0]
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fedc 	bl	8002a68 <SCH_Add_Task>
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <SCH_Delete>:

void SCH_Delete(uint32_t ID){
 8002cb8:	b4b0      	push	{r4, r5, r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	if(ID<0 || ID > current_index_task) return;
 8002cc0:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <SCH_Delete+0xcc>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d856      	bhi.n	8002d7a <SCH_Delete+0xc2>
	for(int i = ID;i<current_index_task; i++){
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	e017      	b.n	8002d02 <SCH_Delete+0x4a>
		SCH_Tasks_G[i] = SCH_Tasks_G[i+1];
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	482c      	ldr	r0, [pc, #176]	; (8002d88 <SCH_Delete+0xd0>)
 8002cd8:	68f9      	ldr	r1, [r7, #12]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4418      	add	r0, r3
 8002ce4:	4928      	ldr	r1, [pc, #160]	; (8002d88 <SCH_Delete+0xd0>)
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	461d      	mov	r5, r3
 8002cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	6023      	str	r3, [r4, #0]
	for(int i = ID;i<current_index_task; i++){
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <SCH_Delete+0xcc>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	dbe1      	blt.n	8002cd2 <SCH_Delete+0x1a>
	}
    SCH_Tasks_G[current_index_task ].pTask = 0;
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <SCH_Delete+0xcc>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <SCH_Delete+0xd0>)
 8002d16:	460b      	mov	r3, r1
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
    SCH_Tasks_G[current_index_task ].Delay = 0;
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <SCH_Delete+0xcc>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4a17      	ldr	r2, [pc, #92]	; (8002d88 <SCH_Delete+0xd0>)
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	3304      	adds	r3, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
    SCH_Tasks_G[current_index_task ].Period = 0;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <SCH_Delete+0xcc>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <SCH_Delete+0xd0>)
 8002d44:	460b      	mov	r3, r1
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3308      	adds	r3, #8
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
    SCH_Tasks_G[current_index_task ].RunMe = 0;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <SCH_Delete+0xcc>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <SCH_Delete+0xd0>)
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	330c      	adds	r3, #12
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
	current_index_task--;
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <SCH_Delete+0xcc>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <SCH_Delete+0xcc>)
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	e000      	b.n	8002d7c <SCH_Delete+0xc4>
	if(ID<0 || ID > current_index_task) return;
 8002d7a:	bf00      	nop
}
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bcb0      	pop	{r4, r5, r7}
 8002d82:	4770      	bx	lr
 8002d84:	20000094 	.word	0x20000094
 8002d88:	20000134 	.word	0x20000134

08002d8c <__errno>:
 8002d8c:	4b01      	ldr	r3, [pc, #4]	; (8002d94 <__errno+0x8>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	2000000c 	.word	0x2000000c

08002d98 <__libc_init_array>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	4d0c      	ldr	r5, [pc, #48]	; (8002dd0 <__libc_init_array+0x38>)
 8002d9e:	4c0d      	ldr	r4, [pc, #52]	; (8002dd4 <__libc_init_array+0x3c>)
 8002da0:	1b64      	subs	r4, r4, r5
 8002da2:	10a4      	asrs	r4, r4, #2
 8002da4:	42a6      	cmp	r6, r4
 8002da6:	d109      	bne.n	8002dbc <__libc_init_array+0x24>
 8002da8:	f000 fc5c 	bl	8003664 <_init>
 8002dac:	2600      	movs	r6, #0
 8002dae:	4d0a      	ldr	r5, [pc, #40]	; (8002dd8 <__libc_init_array+0x40>)
 8002db0:	4c0a      	ldr	r4, [pc, #40]	; (8002ddc <__libc_init_array+0x44>)
 8002db2:	1b64      	subs	r4, r4, r5
 8002db4:	10a4      	asrs	r4, r4, #2
 8002db6:	42a6      	cmp	r6, r4
 8002db8:	d105      	bne.n	8002dc6 <__libc_init_array+0x2e>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc0:	4798      	blx	r3
 8002dc2:	3601      	adds	r6, #1
 8002dc4:	e7ee      	b.n	8002da4 <__libc_init_array+0xc>
 8002dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dca:	4798      	blx	r3
 8002dcc:	3601      	adds	r6, #1
 8002dce:	e7f2      	b.n	8002db6 <__libc_init_array+0x1e>
 8002dd0:	080036ec 	.word	0x080036ec
 8002dd4:	080036ec 	.word	0x080036ec
 8002dd8:	080036ec 	.word	0x080036ec
 8002ddc:	080036f0 	.word	0x080036f0

08002de0 <memset>:
 8002de0:	4603      	mov	r3, r0
 8002de2:	4402      	add	r2, r0
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d100      	bne.n	8002dea <memset+0xa>
 8002de8:	4770      	bx	lr
 8002dea:	f803 1b01 	strb.w	r1, [r3], #1
 8002dee:	e7f9      	b.n	8002de4 <memset+0x4>

08002df0 <siprintf>:
 8002df0:	b40e      	push	{r1, r2, r3}
 8002df2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002df6:	b500      	push	{lr}
 8002df8:	b09c      	sub	sp, #112	; 0x70
 8002dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8002dfc:	9002      	str	r0, [sp, #8]
 8002dfe:	9006      	str	r0, [sp, #24]
 8002e00:	9107      	str	r1, [sp, #28]
 8002e02:	9104      	str	r1, [sp, #16]
 8002e04:	4808      	ldr	r0, [pc, #32]	; (8002e28 <siprintf+0x38>)
 8002e06:	4909      	ldr	r1, [pc, #36]	; (8002e2c <siprintf+0x3c>)
 8002e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e0c:	9105      	str	r1, [sp, #20]
 8002e0e:	6800      	ldr	r0, [r0, #0]
 8002e10:	a902      	add	r1, sp, #8
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	f000 f868 	bl	8002ee8 <_svfiprintf_r>
 8002e18:	2200      	movs	r2, #0
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	b01c      	add	sp, #112	; 0x70
 8002e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e24:	b003      	add	sp, #12
 8002e26:	4770      	bx	lr
 8002e28:	2000000c 	.word	0x2000000c
 8002e2c:	ffff0208 	.word	0xffff0208

08002e30 <__ssputs_r>:
 8002e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e34:	688e      	ldr	r6, [r1, #8]
 8002e36:	4682      	mov	sl, r0
 8002e38:	429e      	cmp	r6, r3
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	4690      	mov	r8, r2
 8002e3e:	461f      	mov	r7, r3
 8002e40:	d838      	bhi.n	8002eb4 <__ssputs_r+0x84>
 8002e42:	898a      	ldrh	r2, [r1, #12]
 8002e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e48:	d032      	beq.n	8002eb0 <__ssputs_r+0x80>
 8002e4a:	6825      	ldr	r5, [r4, #0]
 8002e4c:	6909      	ldr	r1, [r1, #16]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	eba5 0901 	sub.w	r9, r5, r1
 8002e54:	6965      	ldr	r5, [r4, #20]
 8002e56:	444b      	add	r3, r9
 8002e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e60:	106d      	asrs	r5, r5, #1
 8002e62:	429d      	cmp	r5, r3
 8002e64:	bf38      	it	cc
 8002e66:	461d      	movcc	r5, r3
 8002e68:	0553      	lsls	r3, r2, #21
 8002e6a:	d531      	bpl.n	8002ed0 <__ssputs_r+0xa0>
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f000 fb53 	bl	8003518 <_malloc_r>
 8002e72:	4606      	mov	r6, r0
 8002e74:	b950      	cbnz	r0, 8002e8c <__ssputs_r+0x5c>
 8002e76:	230c      	movs	r3, #12
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f8ca 3000 	str.w	r3, [sl]
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e86:	81a3      	strh	r3, [r4, #12]
 8002e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e8c:	464a      	mov	r2, r9
 8002e8e:	6921      	ldr	r1, [r4, #16]
 8002e90:	f000 face 	bl	8003430 <memcpy>
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9e:	81a3      	strh	r3, [r4, #12]
 8002ea0:	6126      	str	r6, [r4, #16]
 8002ea2:	444e      	add	r6, r9
 8002ea4:	6026      	str	r6, [r4, #0]
 8002ea6:	463e      	mov	r6, r7
 8002ea8:	6165      	str	r5, [r4, #20]
 8002eaa:	eba5 0509 	sub.w	r5, r5, r9
 8002eae:	60a5      	str	r5, [r4, #8]
 8002eb0:	42be      	cmp	r6, r7
 8002eb2:	d900      	bls.n	8002eb6 <__ssputs_r+0x86>
 8002eb4:	463e      	mov	r6, r7
 8002eb6:	4632      	mov	r2, r6
 8002eb8:	4641      	mov	r1, r8
 8002eba:	6820      	ldr	r0, [r4, #0]
 8002ebc:	f000 fac6 	bl	800344c <memmove>
 8002ec0:	68a3      	ldr	r3, [r4, #8]
 8002ec2:	6822      	ldr	r2, [r4, #0]
 8002ec4:	1b9b      	subs	r3, r3, r6
 8002ec6:	4432      	add	r2, r6
 8002ec8:	2000      	movs	r0, #0
 8002eca:	60a3      	str	r3, [r4, #8]
 8002ecc:	6022      	str	r2, [r4, #0]
 8002ece:	e7db      	b.n	8002e88 <__ssputs_r+0x58>
 8002ed0:	462a      	mov	r2, r5
 8002ed2:	f000 fb7b 	bl	80035cc <_realloc_r>
 8002ed6:	4606      	mov	r6, r0
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d1e1      	bne.n	8002ea0 <__ssputs_r+0x70>
 8002edc:	4650      	mov	r0, sl
 8002ede:	6921      	ldr	r1, [r4, #16]
 8002ee0:	f000 face 	bl	8003480 <_free_r>
 8002ee4:	e7c7      	b.n	8002e76 <__ssputs_r+0x46>
	...

08002ee8 <_svfiprintf_r>:
 8002ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eec:	4698      	mov	r8, r3
 8002eee:	898b      	ldrh	r3, [r1, #12]
 8002ef0:	4607      	mov	r7, r0
 8002ef2:	061b      	lsls	r3, r3, #24
 8002ef4:	460d      	mov	r5, r1
 8002ef6:	4614      	mov	r4, r2
 8002ef8:	b09d      	sub	sp, #116	; 0x74
 8002efa:	d50e      	bpl.n	8002f1a <_svfiprintf_r+0x32>
 8002efc:	690b      	ldr	r3, [r1, #16]
 8002efe:	b963      	cbnz	r3, 8002f1a <_svfiprintf_r+0x32>
 8002f00:	2140      	movs	r1, #64	; 0x40
 8002f02:	f000 fb09 	bl	8003518 <_malloc_r>
 8002f06:	6028      	str	r0, [r5, #0]
 8002f08:	6128      	str	r0, [r5, #16]
 8002f0a:	b920      	cbnz	r0, 8002f16 <_svfiprintf_r+0x2e>
 8002f0c:	230c      	movs	r3, #12
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295
 8002f14:	e0d1      	b.n	80030ba <_svfiprintf_r+0x1d2>
 8002f16:	2340      	movs	r3, #64	; 0x40
 8002f18:	616b      	str	r3, [r5, #20]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f1e:	2320      	movs	r3, #32
 8002f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f24:	2330      	movs	r3, #48	; 0x30
 8002f26:	f04f 0901 	mov.w	r9, #1
 8002f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80030d4 <_svfiprintf_r+0x1ec>
 8002f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f36:	4623      	mov	r3, r4
 8002f38:	469a      	mov	sl, r3
 8002f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f3e:	b10a      	cbz	r2, 8002f44 <_svfiprintf_r+0x5c>
 8002f40:	2a25      	cmp	r2, #37	; 0x25
 8002f42:	d1f9      	bne.n	8002f38 <_svfiprintf_r+0x50>
 8002f44:	ebba 0b04 	subs.w	fp, sl, r4
 8002f48:	d00b      	beq.n	8002f62 <_svfiprintf_r+0x7a>
 8002f4a:	465b      	mov	r3, fp
 8002f4c:	4622      	mov	r2, r4
 8002f4e:	4629      	mov	r1, r5
 8002f50:	4638      	mov	r0, r7
 8002f52:	f7ff ff6d 	bl	8002e30 <__ssputs_r>
 8002f56:	3001      	adds	r0, #1
 8002f58:	f000 80aa 	beq.w	80030b0 <_svfiprintf_r+0x1c8>
 8002f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f5e:	445a      	add	r2, fp
 8002f60:	9209      	str	r2, [sp, #36]	; 0x24
 8002f62:	f89a 3000 	ldrb.w	r3, [sl]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 80a2 	beq.w	80030b0 <_svfiprintf_r+0x1c8>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f76:	f10a 0a01 	add.w	sl, sl, #1
 8002f7a:	9304      	str	r3, [sp, #16]
 8002f7c:	9307      	str	r3, [sp, #28]
 8002f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f82:	931a      	str	r3, [sp, #104]	; 0x68
 8002f84:	4654      	mov	r4, sl
 8002f86:	2205      	movs	r2, #5
 8002f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f8c:	4851      	ldr	r0, [pc, #324]	; (80030d4 <_svfiprintf_r+0x1ec>)
 8002f8e:	f000 fa41 	bl	8003414 <memchr>
 8002f92:	9a04      	ldr	r2, [sp, #16]
 8002f94:	b9d8      	cbnz	r0, 8002fce <_svfiprintf_r+0xe6>
 8002f96:	06d0      	lsls	r0, r2, #27
 8002f98:	bf44      	itt	mi
 8002f9a:	2320      	movmi	r3, #32
 8002f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fa0:	0711      	lsls	r1, r2, #28
 8002fa2:	bf44      	itt	mi
 8002fa4:	232b      	movmi	r3, #43	; 0x2b
 8002fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002faa:	f89a 3000 	ldrb.w	r3, [sl]
 8002fae:	2b2a      	cmp	r3, #42	; 0x2a
 8002fb0:	d015      	beq.n	8002fde <_svfiprintf_r+0xf6>
 8002fb2:	4654      	mov	r4, sl
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f04f 0c0a 	mov.w	ip, #10
 8002fba:	9a07      	ldr	r2, [sp, #28]
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fc2:	3b30      	subs	r3, #48	; 0x30
 8002fc4:	2b09      	cmp	r3, #9
 8002fc6:	d94e      	bls.n	8003066 <_svfiprintf_r+0x17e>
 8002fc8:	b1b0      	cbz	r0, 8002ff8 <_svfiprintf_r+0x110>
 8002fca:	9207      	str	r2, [sp, #28]
 8002fcc:	e014      	b.n	8002ff8 <_svfiprintf_r+0x110>
 8002fce:	eba0 0308 	sub.w	r3, r0, r8
 8002fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	46a2      	mov	sl, r4
 8002fda:	9304      	str	r3, [sp, #16]
 8002fdc:	e7d2      	b.n	8002f84 <_svfiprintf_r+0x9c>
 8002fde:	9b03      	ldr	r3, [sp, #12]
 8002fe0:	1d19      	adds	r1, r3, #4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	9103      	str	r1, [sp, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bfbb      	ittet	lt
 8002fea:	425b      	neglt	r3, r3
 8002fec:	f042 0202 	orrlt.w	r2, r2, #2
 8002ff0:	9307      	strge	r3, [sp, #28]
 8002ff2:	9307      	strlt	r3, [sp, #28]
 8002ff4:	bfb8      	it	lt
 8002ff6:	9204      	strlt	r2, [sp, #16]
 8002ff8:	7823      	ldrb	r3, [r4, #0]
 8002ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8002ffc:	d10c      	bne.n	8003018 <_svfiprintf_r+0x130>
 8002ffe:	7863      	ldrb	r3, [r4, #1]
 8003000:	2b2a      	cmp	r3, #42	; 0x2a
 8003002:	d135      	bne.n	8003070 <_svfiprintf_r+0x188>
 8003004:	9b03      	ldr	r3, [sp, #12]
 8003006:	3402      	adds	r4, #2
 8003008:	1d1a      	adds	r2, r3, #4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	9203      	str	r2, [sp, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	bfb8      	it	lt
 8003012:	f04f 33ff 	movlt.w	r3, #4294967295
 8003016:	9305      	str	r3, [sp, #20]
 8003018:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030e4 <_svfiprintf_r+0x1fc>
 800301c:	2203      	movs	r2, #3
 800301e:	4650      	mov	r0, sl
 8003020:	7821      	ldrb	r1, [r4, #0]
 8003022:	f000 f9f7 	bl	8003414 <memchr>
 8003026:	b140      	cbz	r0, 800303a <_svfiprintf_r+0x152>
 8003028:	2340      	movs	r3, #64	; 0x40
 800302a:	eba0 000a 	sub.w	r0, r0, sl
 800302e:	fa03 f000 	lsl.w	r0, r3, r0
 8003032:	9b04      	ldr	r3, [sp, #16]
 8003034:	3401      	adds	r4, #1
 8003036:	4303      	orrs	r3, r0
 8003038:	9304      	str	r3, [sp, #16]
 800303a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800303e:	2206      	movs	r2, #6
 8003040:	4825      	ldr	r0, [pc, #148]	; (80030d8 <_svfiprintf_r+0x1f0>)
 8003042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003046:	f000 f9e5 	bl	8003414 <memchr>
 800304a:	2800      	cmp	r0, #0
 800304c:	d038      	beq.n	80030c0 <_svfiprintf_r+0x1d8>
 800304e:	4b23      	ldr	r3, [pc, #140]	; (80030dc <_svfiprintf_r+0x1f4>)
 8003050:	bb1b      	cbnz	r3, 800309a <_svfiprintf_r+0x1b2>
 8003052:	9b03      	ldr	r3, [sp, #12]
 8003054:	3307      	adds	r3, #7
 8003056:	f023 0307 	bic.w	r3, r3, #7
 800305a:	3308      	adds	r3, #8
 800305c:	9303      	str	r3, [sp, #12]
 800305e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003060:	4433      	add	r3, r6
 8003062:	9309      	str	r3, [sp, #36]	; 0x24
 8003064:	e767      	b.n	8002f36 <_svfiprintf_r+0x4e>
 8003066:	460c      	mov	r4, r1
 8003068:	2001      	movs	r0, #1
 800306a:	fb0c 3202 	mla	r2, ip, r2, r3
 800306e:	e7a5      	b.n	8002fbc <_svfiprintf_r+0xd4>
 8003070:	2300      	movs	r3, #0
 8003072:	f04f 0c0a 	mov.w	ip, #10
 8003076:	4619      	mov	r1, r3
 8003078:	3401      	adds	r4, #1
 800307a:	9305      	str	r3, [sp, #20]
 800307c:	4620      	mov	r0, r4
 800307e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003082:	3a30      	subs	r2, #48	; 0x30
 8003084:	2a09      	cmp	r2, #9
 8003086:	d903      	bls.n	8003090 <_svfiprintf_r+0x1a8>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0c5      	beq.n	8003018 <_svfiprintf_r+0x130>
 800308c:	9105      	str	r1, [sp, #20]
 800308e:	e7c3      	b.n	8003018 <_svfiprintf_r+0x130>
 8003090:	4604      	mov	r4, r0
 8003092:	2301      	movs	r3, #1
 8003094:	fb0c 2101 	mla	r1, ip, r1, r2
 8003098:	e7f0      	b.n	800307c <_svfiprintf_r+0x194>
 800309a:	ab03      	add	r3, sp, #12
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	462a      	mov	r2, r5
 80030a0:	4638      	mov	r0, r7
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <_svfiprintf_r+0x1f8>)
 80030a4:	a904      	add	r1, sp, #16
 80030a6:	f3af 8000 	nop.w
 80030aa:	1c42      	adds	r2, r0, #1
 80030ac:	4606      	mov	r6, r0
 80030ae:	d1d6      	bne.n	800305e <_svfiprintf_r+0x176>
 80030b0:	89ab      	ldrh	r3, [r5, #12]
 80030b2:	065b      	lsls	r3, r3, #25
 80030b4:	f53f af2c 	bmi.w	8002f10 <_svfiprintf_r+0x28>
 80030b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030ba:	b01d      	add	sp, #116	; 0x74
 80030bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c0:	ab03      	add	r3, sp, #12
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	462a      	mov	r2, r5
 80030c6:	4638      	mov	r0, r7
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <_svfiprintf_r+0x1f8>)
 80030ca:	a904      	add	r1, sp, #16
 80030cc:	f000 f87c 	bl	80031c8 <_printf_i>
 80030d0:	e7eb      	b.n	80030aa <_svfiprintf_r+0x1c2>
 80030d2:	bf00      	nop
 80030d4:	080036b6 	.word	0x080036b6
 80030d8:	080036c0 	.word	0x080036c0
 80030dc:	00000000 	.word	0x00000000
 80030e0:	08002e31 	.word	0x08002e31
 80030e4:	080036bc 	.word	0x080036bc

080030e8 <_printf_common>:
 80030e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	4616      	mov	r6, r2
 80030ee:	4699      	mov	r9, r3
 80030f0:	688a      	ldr	r2, [r1, #8]
 80030f2:	690b      	ldr	r3, [r1, #16]
 80030f4:	4607      	mov	r7, r0
 80030f6:	4293      	cmp	r3, r2
 80030f8:	bfb8      	it	lt
 80030fa:	4613      	movlt	r3, r2
 80030fc:	6033      	str	r3, [r6, #0]
 80030fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003102:	460c      	mov	r4, r1
 8003104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003108:	b10a      	cbz	r2, 800310e <_printf_common+0x26>
 800310a:	3301      	adds	r3, #1
 800310c:	6033      	str	r3, [r6, #0]
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	0699      	lsls	r1, r3, #26
 8003112:	bf42      	ittt	mi
 8003114:	6833      	ldrmi	r3, [r6, #0]
 8003116:	3302      	addmi	r3, #2
 8003118:	6033      	strmi	r3, [r6, #0]
 800311a:	6825      	ldr	r5, [r4, #0]
 800311c:	f015 0506 	ands.w	r5, r5, #6
 8003120:	d106      	bne.n	8003130 <_printf_common+0x48>
 8003122:	f104 0a19 	add.w	sl, r4, #25
 8003126:	68e3      	ldr	r3, [r4, #12]
 8003128:	6832      	ldr	r2, [r6, #0]
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	42ab      	cmp	r3, r5
 800312e:	dc28      	bgt.n	8003182 <_printf_common+0x9a>
 8003130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003134:	1e13      	subs	r3, r2, #0
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	bf18      	it	ne
 800313a:	2301      	movne	r3, #1
 800313c:	0692      	lsls	r2, r2, #26
 800313e:	d42d      	bmi.n	800319c <_printf_common+0xb4>
 8003140:	4649      	mov	r1, r9
 8003142:	4638      	mov	r0, r7
 8003144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003148:	47c0      	blx	r8
 800314a:	3001      	adds	r0, #1
 800314c:	d020      	beq.n	8003190 <_printf_common+0xa8>
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	68e5      	ldr	r5, [r4, #12]
 8003152:	f003 0306 	and.w	r3, r3, #6
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf18      	it	ne
 800315a:	2500      	movne	r5, #0
 800315c:	6832      	ldr	r2, [r6, #0]
 800315e:	f04f 0600 	mov.w	r6, #0
 8003162:	68a3      	ldr	r3, [r4, #8]
 8003164:	bf08      	it	eq
 8003166:	1aad      	subeq	r5, r5, r2
 8003168:	6922      	ldr	r2, [r4, #16]
 800316a:	bf08      	it	eq
 800316c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003170:	4293      	cmp	r3, r2
 8003172:	bfc4      	itt	gt
 8003174:	1a9b      	subgt	r3, r3, r2
 8003176:	18ed      	addgt	r5, r5, r3
 8003178:	341a      	adds	r4, #26
 800317a:	42b5      	cmp	r5, r6
 800317c:	d11a      	bne.n	80031b4 <_printf_common+0xcc>
 800317e:	2000      	movs	r0, #0
 8003180:	e008      	b.n	8003194 <_printf_common+0xac>
 8003182:	2301      	movs	r3, #1
 8003184:	4652      	mov	r2, sl
 8003186:	4649      	mov	r1, r9
 8003188:	4638      	mov	r0, r7
 800318a:	47c0      	blx	r8
 800318c:	3001      	adds	r0, #1
 800318e:	d103      	bne.n	8003198 <_printf_common+0xb0>
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003198:	3501      	adds	r5, #1
 800319a:	e7c4      	b.n	8003126 <_printf_common+0x3e>
 800319c:	2030      	movs	r0, #48	; 0x30
 800319e:	18e1      	adds	r1, r4, r3
 80031a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031aa:	4422      	add	r2, r4
 80031ac:	3302      	adds	r3, #2
 80031ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031b2:	e7c5      	b.n	8003140 <_printf_common+0x58>
 80031b4:	2301      	movs	r3, #1
 80031b6:	4622      	mov	r2, r4
 80031b8:	4649      	mov	r1, r9
 80031ba:	4638      	mov	r0, r7
 80031bc:	47c0      	blx	r8
 80031be:	3001      	adds	r0, #1
 80031c0:	d0e6      	beq.n	8003190 <_printf_common+0xa8>
 80031c2:	3601      	adds	r6, #1
 80031c4:	e7d9      	b.n	800317a <_printf_common+0x92>
	...

080031c8 <_printf_i>:
 80031c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031cc:	460c      	mov	r4, r1
 80031ce:	7e27      	ldrb	r7, [r4, #24]
 80031d0:	4691      	mov	r9, r2
 80031d2:	2f78      	cmp	r7, #120	; 0x78
 80031d4:	4680      	mov	r8, r0
 80031d6:	469a      	mov	sl, r3
 80031d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031de:	d807      	bhi.n	80031f0 <_printf_i+0x28>
 80031e0:	2f62      	cmp	r7, #98	; 0x62
 80031e2:	d80a      	bhi.n	80031fa <_printf_i+0x32>
 80031e4:	2f00      	cmp	r7, #0
 80031e6:	f000 80d9 	beq.w	800339c <_printf_i+0x1d4>
 80031ea:	2f58      	cmp	r7, #88	; 0x58
 80031ec:	f000 80a4 	beq.w	8003338 <_printf_i+0x170>
 80031f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031f8:	e03a      	b.n	8003270 <_printf_i+0xa8>
 80031fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031fe:	2b15      	cmp	r3, #21
 8003200:	d8f6      	bhi.n	80031f0 <_printf_i+0x28>
 8003202:	a001      	add	r0, pc, #4	; (adr r0, 8003208 <_printf_i+0x40>)
 8003204:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003208:	08003261 	.word	0x08003261
 800320c:	08003275 	.word	0x08003275
 8003210:	080031f1 	.word	0x080031f1
 8003214:	080031f1 	.word	0x080031f1
 8003218:	080031f1 	.word	0x080031f1
 800321c:	080031f1 	.word	0x080031f1
 8003220:	08003275 	.word	0x08003275
 8003224:	080031f1 	.word	0x080031f1
 8003228:	080031f1 	.word	0x080031f1
 800322c:	080031f1 	.word	0x080031f1
 8003230:	080031f1 	.word	0x080031f1
 8003234:	08003383 	.word	0x08003383
 8003238:	080032a5 	.word	0x080032a5
 800323c:	08003365 	.word	0x08003365
 8003240:	080031f1 	.word	0x080031f1
 8003244:	080031f1 	.word	0x080031f1
 8003248:	080033a5 	.word	0x080033a5
 800324c:	080031f1 	.word	0x080031f1
 8003250:	080032a5 	.word	0x080032a5
 8003254:	080031f1 	.word	0x080031f1
 8003258:	080031f1 	.word	0x080031f1
 800325c:	0800336d 	.word	0x0800336d
 8003260:	680b      	ldr	r3, [r1, #0]
 8003262:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003266:	1d1a      	adds	r2, r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	600a      	str	r2, [r1, #0]
 800326c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003270:	2301      	movs	r3, #1
 8003272:	e0a4      	b.n	80033be <_printf_i+0x1f6>
 8003274:	6825      	ldr	r5, [r4, #0]
 8003276:	6808      	ldr	r0, [r1, #0]
 8003278:	062e      	lsls	r6, r5, #24
 800327a:	f100 0304 	add.w	r3, r0, #4
 800327e:	d50a      	bpl.n	8003296 <_printf_i+0xce>
 8003280:	6805      	ldr	r5, [r0, #0]
 8003282:	600b      	str	r3, [r1, #0]
 8003284:	2d00      	cmp	r5, #0
 8003286:	da03      	bge.n	8003290 <_printf_i+0xc8>
 8003288:	232d      	movs	r3, #45	; 0x2d
 800328a:	426d      	negs	r5, r5
 800328c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003290:	230a      	movs	r3, #10
 8003292:	485e      	ldr	r0, [pc, #376]	; (800340c <_printf_i+0x244>)
 8003294:	e019      	b.n	80032ca <_printf_i+0x102>
 8003296:	f015 0f40 	tst.w	r5, #64	; 0x40
 800329a:	6805      	ldr	r5, [r0, #0]
 800329c:	600b      	str	r3, [r1, #0]
 800329e:	bf18      	it	ne
 80032a0:	b22d      	sxthne	r5, r5
 80032a2:	e7ef      	b.n	8003284 <_printf_i+0xbc>
 80032a4:	680b      	ldr	r3, [r1, #0]
 80032a6:	6825      	ldr	r5, [r4, #0]
 80032a8:	1d18      	adds	r0, r3, #4
 80032aa:	6008      	str	r0, [r1, #0]
 80032ac:	0628      	lsls	r0, r5, #24
 80032ae:	d501      	bpl.n	80032b4 <_printf_i+0xec>
 80032b0:	681d      	ldr	r5, [r3, #0]
 80032b2:	e002      	b.n	80032ba <_printf_i+0xf2>
 80032b4:	0669      	lsls	r1, r5, #25
 80032b6:	d5fb      	bpl.n	80032b0 <_printf_i+0xe8>
 80032b8:	881d      	ldrh	r5, [r3, #0]
 80032ba:	2f6f      	cmp	r7, #111	; 0x6f
 80032bc:	bf0c      	ite	eq
 80032be:	2308      	moveq	r3, #8
 80032c0:	230a      	movne	r3, #10
 80032c2:	4852      	ldr	r0, [pc, #328]	; (800340c <_printf_i+0x244>)
 80032c4:	2100      	movs	r1, #0
 80032c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ca:	6866      	ldr	r6, [r4, #4]
 80032cc:	2e00      	cmp	r6, #0
 80032ce:	bfa8      	it	ge
 80032d0:	6821      	ldrge	r1, [r4, #0]
 80032d2:	60a6      	str	r6, [r4, #8]
 80032d4:	bfa4      	itt	ge
 80032d6:	f021 0104 	bicge.w	r1, r1, #4
 80032da:	6021      	strge	r1, [r4, #0]
 80032dc:	b90d      	cbnz	r5, 80032e2 <_printf_i+0x11a>
 80032de:	2e00      	cmp	r6, #0
 80032e0:	d04d      	beq.n	800337e <_printf_i+0x1b6>
 80032e2:	4616      	mov	r6, r2
 80032e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80032e8:	fb03 5711 	mls	r7, r3, r1, r5
 80032ec:	5dc7      	ldrb	r7, [r0, r7]
 80032ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032f2:	462f      	mov	r7, r5
 80032f4:	42bb      	cmp	r3, r7
 80032f6:	460d      	mov	r5, r1
 80032f8:	d9f4      	bls.n	80032e4 <_printf_i+0x11c>
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d10b      	bne.n	8003316 <_printf_i+0x14e>
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	07df      	lsls	r7, r3, #31
 8003302:	d508      	bpl.n	8003316 <_printf_i+0x14e>
 8003304:	6923      	ldr	r3, [r4, #16]
 8003306:	6861      	ldr	r1, [r4, #4]
 8003308:	4299      	cmp	r1, r3
 800330a:	bfde      	ittt	le
 800330c:	2330      	movle	r3, #48	; 0x30
 800330e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003312:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003316:	1b92      	subs	r2, r2, r6
 8003318:	6122      	str	r2, [r4, #16]
 800331a:	464b      	mov	r3, r9
 800331c:	4621      	mov	r1, r4
 800331e:	4640      	mov	r0, r8
 8003320:	f8cd a000 	str.w	sl, [sp]
 8003324:	aa03      	add	r2, sp, #12
 8003326:	f7ff fedf 	bl	80030e8 <_printf_common>
 800332a:	3001      	adds	r0, #1
 800332c:	d14c      	bne.n	80033c8 <_printf_i+0x200>
 800332e:	f04f 30ff 	mov.w	r0, #4294967295
 8003332:	b004      	add	sp, #16
 8003334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003338:	4834      	ldr	r0, [pc, #208]	; (800340c <_printf_i+0x244>)
 800333a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800333e:	680e      	ldr	r6, [r1, #0]
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	f856 5b04 	ldr.w	r5, [r6], #4
 8003346:	061f      	lsls	r7, r3, #24
 8003348:	600e      	str	r6, [r1, #0]
 800334a:	d514      	bpl.n	8003376 <_printf_i+0x1ae>
 800334c:	07d9      	lsls	r1, r3, #31
 800334e:	bf44      	itt	mi
 8003350:	f043 0320 	orrmi.w	r3, r3, #32
 8003354:	6023      	strmi	r3, [r4, #0]
 8003356:	b91d      	cbnz	r5, 8003360 <_printf_i+0x198>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	f023 0320 	bic.w	r3, r3, #32
 800335e:	6023      	str	r3, [r4, #0]
 8003360:	2310      	movs	r3, #16
 8003362:	e7af      	b.n	80032c4 <_printf_i+0xfc>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	f043 0320 	orr.w	r3, r3, #32
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	2378      	movs	r3, #120	; 0x78
 800336e:	4828      	ldr	r0, [pc, #160]	; (8003410 <_printf_i+0x248>)
 8003370:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003374:	e7e3      	b.n	800333e <_printf_i+0x176>
 8003376:	065e      	lsls	r6, r3, #25
 8003378:	bf48      	it	mi
 800337a:	b2ad      	uxthmi	r5, r5
 800337c:	e7e6      	b.n	800334c <_printf_i+0x184>
 800337e:	4616      	mov	r6, r2
 8003380:	e7bb      	b.n	80032fa <_printf_i+0x132>
 8003382:	680b      	ldr	r3, [r1, #0]
 8003384:	6826      	ldr	r6, [r4, #0]
 8003386:	1d1d      	adds	r5, r3, #4
 8003388:	6960      	ldr	r0, [r4, #20]
 800338a:	600d      	str	r5, [r1, #0]
 800338c:	0635      	lsls	r5, r6, #24
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	d501      	bpl.n	8003396 <_printf_i+0x1ce>
 8003392:	6018      	str	r0, [r3, #0]
 8003394:	e002      	b.n	800339c <_printf_i+0x1d4>
 8003396:	0671      	lsls	r1, r6, #25
 8003398:	d5fb      	bpl.n	8003392 <_printf_i+0x1ca>
 800339a:	8018      	strh	r0, [r3, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	4616      	mov	r6, r2
 80033a0:	6123      	str	r3, [r4, #16]
 80033a2:	e7ba      	b.n	800331a <_printf_i+0x152>
 80033a4:	680b      	ldr	r3, [r1, #0]
 80033a6:	1d1a      	adds	r2, r3, #4
 80033a8:	600a      	str	r2, [r1, #0]
 80033aa:	681e      	ldr	r6, [r3, #0]
 80033ac:	2100      	movs	r1, #0
 80033ae:	4630      	mov	r0, r6
 80033b0:	6862      	ldr	r2, [r4, #4]
 80033b2:	f000 f82f 	bl	8003414 <memchr>
 80033b6:	b108      	cbz	r0, 80033bc <_printf_i+0x1f4>
 80033b8:	1b80      	subs	r0, r0, r6
 80033ba:	6060      	str	r0, [r4, #4]
 80033bc:	6863      	ldr	r3, [r4, #4]
 80033be:	6123      	str	r3, [r4, #16]
 80033c0:	2300      	movs	r3, #0
 80033c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033c6:	e7a8      	b.n	800331a <_printf_i+0x152>
 80033c8:	4632      	mov	r2, r6
 80033ca:	4649      	mov	r1, r9
 80033cc:	4640      	mov	r0, r8
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	47d0      	blx	sl
 80033d2:	3001      	adds	r0, #1
 80033d4:	d0ab      	beq.n	800332e <_printf_i+0x166>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	079b      	lsls	r3, r3, #30
 80033da:	d413      	bmi.n	8003404 <_printf_i+0x23c>
 80033dc:	68e0      	ldr	r0, [r4, #12]
 80033de:	9b03      	ldr	r3, [sp, #12]
 80033e0:	4298      	cmp	r0, r3
 80033e2:	bfb8      	it	lt
 80033e4:	4618      	movlt	r0, r3
 80033e6:	e7a4      	b.n	8003332 <_printf_i+0x16a>
 80033e8:	2301      	movs	r3, #1
 80033ea:	4632      	mov	r2, r6
 80033ec:	4649      	mov	r1, r9
 80033ee:	4640      	mov	r0, r8
 80033f0:	47d0      	blx	sl
 80033f2:	3001      	adds	r0, #1
 80033f4:	d09b      	beq.n	800332e <_printf_i+0x166>
 80033f6:	3501      	adds	r5, #1
 80033f8:	68e3      	ldr	r3, [r4, #12]
 80033fa:	9903      	ldr	r1, [sp, #12]
 80033fc:	1a5b      	subs	r3, r3, r1
 80033fe:	42ab      	cmp	r3, r5
 8003400:	dcf2      	bgt.n	80033e8 <_printf_i+0x220>
 8003402:	e7eb      	b.n	80033dc <_printf_i+0x214>
 8003404:	2500      	movs	r5, #0
 8003406:	f104 0619 	add.w	r6, r4, #25
 800340a:	e7f5      	b.n	80033f8 <_printf_i+0x230>
 800340c:	080036c7 	.word	0x080036c7
 8003410:	080036d8 	.word	0x080036d8

08003414 <memchr>:
 8003414:	4603      	mov	r3, r0
 8003416:	b510      	push	{r4, lr}
 8003418:	b2c9      	uxtb	r1, r1
 800341a:	4402      	add	r2, r0
 800341c:	4293      	cmp	r3, r2
 800341e:	4618      	mov	r0, r3
 8003420:	d101      	bne.n	8003426 <memchr+0x12>
 8003422:	2000      	movs	r0, #0
 8003424:	e003      	b.n	800342e <memchr+0x1a>
 8003426:	7804      	ldrb	r4, [r0, #0]
 8003428:	3301      	adds	r3, #1
 800342a:	428c      	cmp	r4, r1
 800342c:	d1f6      	bne.n	800341c <memchr+0x8>
 800342e:	bd10      	pop	{r4, pc}

08003430 <memcpy>:
 8003430:	440a      	add	r2, r1
 8003432:	4291      	cmp	r1, r2
 8003434:	f100 33ff 	add.w	r3, r0, #4294967295
 8003438:	d100      	bne.n	800343c <memcpy+0xc>
 800343a:	4770      	bx	lr
 800343c:	b510      	push	{r4, lr}
 800343e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003442:	4291      	cmp	r1, r2
 8003444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003448:	d1f9      	bne.n	800343e <memcpy+0xe>
 800344a:	bd10      	pop	{r4, pc}

0800344c <memmove>:
 800344c:	4288      	cmp	r0, r1
 800344e:	b510      	push	{r4, lr}
 8003450:	eb01 0402 	add.w	r4, r1, r2
 8003454:	d902      	bls.n	800345c <memmove+0x10>
 8003456:	4284      	cmp	r4, r0
 8003458:	4623      	mov	r3, r4
 800345a:	d807      	bhi.n	800346c <memmove+0x20>
 800345c:	1e43      	subs	r3, r0, #1
 800345e:	42a1      	cmp	r1, r4
 8003460:	d008      	beq.n	8003474 <memmove+0x28>
 8003462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800346a:	e7f8      	b.n	800345e <memmove+0x12>
 800346c:	4601      	mov	r1, r0
 800346e:	4402      	add	r2, r0
 8003470:	428a      	cmp	r2, r1
 8003472:	d100      	bne.n	8003476 <memmove+0x2a>
 8003474:	bd10      	pop	{r4, pc}
 8003476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800347a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800347e:	e7f7      	b.n	8003470 <memmove+0x24>

08003480 <_free_r>:
 8003480:	b538      	push	{r3, r4, r5, lr}
 8003482:	4605      	mov	r5, r0
 8003484:	2900      	cmp	r1, #0
 8003486:	d043      	beq.n	8003510 <_free_r+0x90>
 8003488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800348c:	1f0c      	subs	r4, r1, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	bfb8      	it	lt
 8003492:	18e4      	addlt	r4, r4, r3
 8003494:	f000 f8d0 	bl	8003638 <__malloc_lock>
 8003498:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <_free_r+0x94>)
 800349a:	6813      	ldr	r3, [r2, #0]
 800349c:	4610      	mov	r0, r2
 800349e:	b933      	cbnz	r3, 80034ae <_free_r+0x2e>
 80034a0:	6063      	str	r3, [r4, #4]
 80034a2:	6014      	str	r4, [r2, #0]
 80034a4:	4628      	mov	r0, r5
 80034a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034aa:	f000 b8cb 	b.w	8003644 <__malloc_unlock>
 80034ae:	42a3      	cmp	r3, r4
 80034b0:	d90a      	bls.n	80034c8 <_free_r+0x48>
 80034b2:	6821      	ldr	r1, [r4, #0]
 80034b4:	1862      	adds	r2, r4, r1
 80034b6:	4293      	cmp	r3, r2
 80034b8:	bf01      	itttt	eq
 80034ba:	681a      	ldreq	r2, [r3, #0]
 80034bc:	685b      	ldreq	r3, [r3, #4]
 80034be:	1852      	addeq	r2, r2, r1
 80034c0:	6022      	streq	r2, [r4, #0]
 80034c2:	6063      	str	r3, [r4, #4]
 80034c4:	6004      	str	r4, [r0, #0]
 80034c6:	e7ed      	b.n	80034a4 <_free_r+0x24>
 80034c8:	461a      	mov	r2, r3
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	b10b      	cbz	r3, 80034d2 <_free_r+0x52>
 80034ce:	42a3      	cmp	r3, r4
 80034d0:	d9fa      	bls.n	80034c8 <_free_r+0x48>
 80034d2:	6811      	ldr	r1, [r2, #0]
 80034d4:	1850      	adds	r0, r2, r1
 80034d6:	42a0      	cmp	r0, r4
 80034d8:	d10b      	bne.n	80034f2 <_free_r+0x72>
 80034da:	6820      	ldr	r0, [r4, #0]
 80034dc:	4401      	add	r1, r0
 80034de:	1850      	adds	r0, r2, r1
 80034e0:	4283      	cmp	r3, r0
 80034e2:	6011      	str	r1, [r2, #0]
 80034e4:	d1de      	bne.n	80034a4 <_free_r+0x24>
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4401      	add	r1, r0
 80034ec:	6011      	str	r1, [r2, #0]
 80034ee:	6053      	str	r3, [r2, #4]
 80034f0:	e7d8      	b.n	80034a4 <_free_r+0x24>
 80034f2:	d902      	bls.n	80034fa <_free_r+0x7a>
 80034f4:	230c      	movs	r3, #12
 80034f6:	602b      	str	r3, [r5, #0]
 80034f8:	e7d4      	b.n	80034a4 <_free_r+0x24>
 80034fa:	6820      	ldr	r0, [r4, #0]
 80034fc:	1821      	adds	r1, r4, r0
 80034fe:	428b      	cmp	r3, r1
 8003500:	bf01      	itttt	eq
 8003502:	6819      	ldreq	r1, [r3, #0]
 8003504:	685b      	ldreq	r3, [r3, #4]
 8003506:	1809      	addeq	r1, r1, r0
 8003508:	6021      	streq	r1, [r4, #0]
 800350a:	6063      	str	r3, [r4, #4]
 800350c:	6054      	str	r4, [r2, #4]
 800350e:	e7c9      	b.n	80034a4 <_free_r+0x24>
 8003510:	bd38      	pop	{r3, r4, r5, pc}
 8003512:	bf00      	nop
 8003514:	20000098 	.word	0x20000098

08003518 <_malloc_r>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	1ccd      	adds	r5, r1, #3
 800351c:	f025 0503 	bic.w	r5, r5, #3
 8003520:	3508      	adds	r5, #8
 8003522:	2d0c      	cmp	r5, #12
 8003524:	bf38      	it	cc
 8003526:	250c      	movcc	r5, #12
 8003528:	2d00      	cmp	r5, #0
 800352a:	4606      	mov	r6, r0
 800352c:	db01      	blt.n	8003532 <_malloc_r+0x1a>
 800352e:	42a9      	cmp	r1, r5
 8003530:	d903      	bls.n	800353a <_malloc_r+0x22>
 8003532:	230c      	movs	r3, #12
 8003534:	6033      	str	r3, [r6, #0]
 8003536:	2000      	movs	r0, #0
 8003538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800353a:	f000 f87d 	bl	8003638 <__malloc_lock>
 800353e:	4921      	ldr	r1, [pc, #132]	; (80035c4 <_malloc_r+0xac>)
 8003540:	680a      	ldr	r2, [r1, #0]
 8003542:	4614      	mov	r4, r2
 8003544:	b99c      	cbnz	r4, 800356e <_malloc_r+0x56>
 8003546:	4f20      	ldr	r7, [pc, #128]	; (80035c8 <_malloc_r+0xb0>)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b923      	cbnz	r3, 8003556 <_malloc_r+0x3e>
 800354c:	4621      	mov	r1, r4
 800354e:	4630      	mov	r0, r6
 8003550:	f000 f862 	bl	8003618 <_sbrk_r>
 8003554:	6038      	str	r0, [r7, #0]
 8003556:	4629      	mov	r1, r5
 8003558:	4630      	mov	r0, r6
 800355a:	f000 f85d 	bl	8003618 <_sbrk_r>
 800355e:	1c43      	adds	r3, r0, #1
 8003560:	d123      	bne.n	80035aa <_malloc_r+0x92>
 8003562:	230c      	movs	r3, #12
 8003564:	4630      	mov	r0, r6
 8003566:	6033      	str	r3, [r6, #0]
 8003568:	f000 f86c 	bl	8003644 <__malloc_unlock>
 800356c:	e7e3      	b.n	8003536 <_malloc_r+0x1e>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	1b5b      	subs	r3, r3, r5
 8003572:	d417      	bmi.n	80035a4 <_malloc_r+0x8c>
 8003574:	2b0b      	cmp	r3, #11
 8003576:	d903      	bls.n	8003580 <_malloc_r+0x68>
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	441c      	add	r4, r3
 800357c:	6025      	str	r5, [r4, #0]
 800357e:	e004      	b.n	800358a <_malloc_r+0x72>
 8003580:	6863      	ldr	r3, [r4, #4]
 8003582:	42a2      	cmp	r2, r4
 8003584:	bf0c      	ite	eq
 8003586:	600b      	streq	r3, [r1, #0]
 8003588:	6053      	strne	r3, [r2, #4]
 800358a:	4630      	mov	r0, r6
 800358c:	f000 f85a 	bl	8003644 <__malloc_unlock>
 8003590:	f104 000b 	add.w	r0, r4, #11
 8003594:	1d23      	adds	r3, r4, #4
 8003596:	f020 0007 	bic.w	r0, r0, #7
 800359a:	1ac2      	subs	r2, r0, r3
 800359c:	d0cc      	beq.n	8003538 <_malloc_r+0x20>
 800359e:	1a1b      	subs	r3, r3, r0
 80035a0:	50a3      	str	r3, [r4, r2]
 80035a2:	e7c9      	b.n	8003538 <_malloc_r+0x20>
 80035a4:	4622      	mov	r2, r4
 80035a6:	6864      	ldr	r4, [r4, #4]
 80035a8:	e7cc      	b.n	8003544 <_malloc_r+0x2c>
 80035aa:	1cc4      	adds	r4, r0, #3
 80035ac:	f024 0403 	bic.w	r4, r4, #3
 80035b0:	42a0      	cmp	r0, r4
 80035b2:	d0e3      	beq.n	800357c <_malloc_r+0x64>
 80035b4:	1a21      	subs	r1, r4, r0
 80035b6:	4630      	mov	r0, r6
 80035b8:	f000 f82e 	bl	8003618 <_sbrk_r>
 80035bc:	3001      	adds	r0, #1
 80035be:	d1dd      	bne.n	800357c <_malloc_r+0x64>
 80035c0:	e7cf      	b.n	8003562 <_malloc_r+0x4a>
 80035c2:	bf00      	nop
 80035c4:	20000098 	.word	0x20000098
 80035c8:	2000009c 	.word	0x2000009c

080035cc <_realloc_r>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	4607      	mov	r7, r0
 80035d0:	4614      	mov	r4, r2
 80035d2:	460e      	mov	r6, r1
 80035d4:	b921      	cbnz	r1, 80035e0 <_realloc_r+0x14>
 80035d6:	4611      	mov	r1, r2
 80035d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035dc:	f7ff bf9c 	b.w	8003518 <_malloc_r>
 80035e0:	b922      	cbnz	r2, 80035ec <_realloc_r+0x20>
 80035e2:	f7ff ff4d 	bl	8003480 <_free_r>
 80035e6:	4625      	mov	r5, r4
 80035e8:	4628      	mov	r0, r5
 80035ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ec:	f000 f830 	bl	8003650 <_malloc_usable_size_r>
 80035f0:	42a0      	cmp	r0, r4
 80035f2:	d20f      	bcs.n	8003614 <_realloc_r+0x48>
 80035f4:	4621      	mov	r1, r4
 80035f6:	4638      	mov	r0, r7
 80035f8:	f7ff ff8e 	bl	8003518 <_malloc_r>
 80035fc:	4605      	mov	r5, r0
 80035fe:	2800      	cmp	r0, #0
 8003600:	d0f2      	beq.n	80035e8 <_realloc_r+0x1c>
 8003602:	4631      	mov	r1, r6
 8003604:	4622      	mov	r2, r4
 8003606:	f7ff ff13 	bl	8003430 <memcpy>
 800360a:	4631      	mov	r1, r6
 800360c:	4638      	mov	r0, r7
 800360e:	f7ff ff37 	bl	8003480 <_free_r>
 8003612:	e7e9      	b.n	80035e8 <_realloc_r+0x1c>
 8003614:	4635      	mov	r5, r6
 8003616:	e7e7      	b.n	80035e8 <_realloc_r+0x1c>

08003618 <_sbrk_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	2300      	movs	r3, #0
 800361c:	4d05      	ldr	r5, [pc, #20]	; (8003634 <_sbrk_r+0x1c>)
 800361e:	4604      	mov	r4, r0
 8003620:	4608      	mov	r0, r1
 8003622:	602b      	str	r3, [r5, #0]
 8003624:	f7fc ffe4 	bl	80005f0 <_sbrk>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d102      	bne.n	8003632 <_sbrk_r+0x1a>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	b103      	cbz	r3, 8003632 <_sbrk_r+0x1a>
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	bd38      	pop	{r3, r4, r5, pc}
 8003634:	20000454 	.word	0x20000454

08003638 <__malloc_lock>:
 8003638:	4801      	ldr	r0, [pc, #4]	; (8003640 <__malloc_lock+0x8>)
 800363a:	f000 b811 	b.w	8003660 <__retarget_lock_acquire_recursive>
 800363e:	bf00      	nop
 8003640:	2000045c 	.word	0x2000045c

08003644 <__malloc_unlock>:
 8003644:	4801      	ldr	r0, [pc, #4]	; (800364c <__malloc_unlock+0x8>)
 8003646:	f000 b80c 	b.w	8003662 <__retarget_lock_release_recursive>
 800364a:	bf00      	nop
 800364c:	2000045c 	.word	0x2000045c

08003650 <_malloc_usable_size_r>:
 8003650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003654:	1f18      	subs	r0, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	bfbc      	itt	lt
 800365a:	580b      	ldrlt	r3, [r1, r0]
 800365c:	18c0      	addlt	r0, r0, r3
 800365e:	4770      	bx	lr

08003660 <__retarget_lock_acquire_recursive>:
 8003660:	4770      	bx	lr

08003662 <__retarget_lock_release_recursive>:
 8003662:	4770      	bx	lr

08003664 <_init>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr

08003670 <_fini>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	bf00      	nop
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr
